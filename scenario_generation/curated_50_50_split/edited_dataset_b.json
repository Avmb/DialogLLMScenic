[
  {
    "docstring": "Adversary vehicle performs a lane change to bypass the slow ego vehicle before returning to its original lane.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town03.xodr')\nparam carla_map = 'Town03'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nparam EGO_SPEED = VerifaiRange(2, 4)\n\nparam ADV_DIST = VerifaiRange(-25, -10)\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nBYPASS_DIST = [15, 10]\nINIT_DIST = 50\nTERM_TIME = 5\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior AdversaryBehavior():\n\ttry:\n\t\tdo FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\tinterrupt when withinDistanceToAnyObjs(self, BYPASS_DIST[0]):\n\t\tfasterLaneSec = self.laneSection.fasterLane\n\t\tdo LaneChangeBehavior(\n\t\t\t\tlaneSectionToSwitch=fasterLaneSec,\n\t\t\t\ttarget_speed=globalParameters.ADV_SPEED)\n\t\tdo FollowLaneBehavior(\n\t\t\t\ttarget_speed=globalParameters.ADV_SPEED,\n\t\t\t\tlaneToFollow=fasterLaneSec.lane) \\\n\t\t\tuntil (distance to adversary) > BYPASS_DIST[1]\n\t\tslowerLaneSec = self.laneSection.slowerLane\n\t\tdo LaneChangeBehavior(\n\t\t\t\tlaneSectionToSwitch=slowerLaneSec,\n\t\t\t\ttarget_speed=globalParameters.ADV_SPEED)\n\t\tdo FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED) for TERM_TIME seconds\n\t\tterminate \n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\ninitLane = Uniform(*network.lanes)\negoSpawnPt = OrientedPoint in initLane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n\nadversary = Car following roadDirection for globalParameters.ADV_DIST,\n\twith blueprint MODEL,\n\twith behavior AdversaryBehavior()\n\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary to intersection) > INIT_DIST\nrequire always (ego.laneSection._fasterLane is not None)",
    "name": "bypassing_02"
  },
  {
    "docstring": "Ego vehicle performs multiple lane changes to bypass two slow adversary vehicles.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town03.xodr')\nparam carla_map = 'Town03'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nparam EGO_SPEED = VerifaiRange(6, 8)\n\nparam ADV1_DIST = VerifaiRange(20, 25)\nparam ADV2_DIST = globalParameters.ADV1_DIST + VerifaiRange(15, 20)\nparam ADV_SPEED = VerifaiRange(2, 4)\n\nBYPASS_DIST = 15\nINIT_DIST = 50\nTERM_DIST = globalParameters.ADV2_DIST + 15\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior():\n\ttry:\n\t\tdo FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n\tinterrupt when (distance to adversary_1) < BYPASS_DIST:\n\t\tnewLaneSec = self.laneSection.laneToRight\n\t\tdo LaneChangeBehavior(\n\t\t\tlaneSectionToSwitch=newLaneSec,\n\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\tinterrupt when (distance to adversary_2) < BYPASS_DIST:\n\t\tnewLaneSec = self.laneSection.laneToLeft\n\t\tdo LaneChangeBehavior(\n\t\t\tlaneSectionToSwitch=newLaneSec,\n\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\nbehavior Adversary2Behavior():\n\trightLaneSec = self.laneSection.laneToRight\n\tdo LaneChangeBehavior(\n\t\tlaneSectionToSwitch=rightLaneSec,\n\t\ttarget_speed=globalParameters.ADV_SPEED)\n\tdo FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\ninitLane = Uniform(*filter(lambda lane:\n\tall([sec._laneToRight is not None for sec in lane.sections]),\n\tnetwork.lanes))\negoSpawnPt = OrientedPoint in initLane.centerline\negoLaneSecToSwitch = initLane.sectionAt(egoSpawnPt).laneToRight\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nadversary_1, adversary_2, adversary_3 = Car, Car, Car\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior()\n\nadversary_1 = Car following roadDirection for globalParameters.ADV1_DIST,\n\twith blueprint MODEL,\n\twith behavior FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\nadversary_2 = Car following roadDirection for globalParameters.ADV2_DIST,\n\twith blueprint MODEL,\n\twith behavior Adversary2Behavior()\n\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary_1 to intersection) > INIT_DIST\nrequire (distance from adversary_2 to intersection) > INIT_DIST\nterminate when (distance to adversary_2) > TERM_DIST",
    "name": "bypassing_04"
  },
  {
    "docstring": "Crossing negotiation at an unsignalized intersection.\nThe ego-vehicle needs to negotiate with other vehicles to cross an unsignalized intersection. In this situation it is assumed that the first to enter the intersection has priority.",
    "has_docstring": true,
    "body": "## SET MAP AND MODEL (i.e. definitions of all referenceable vehicle types, road library, etc)\nparam map = localPath('../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n## CONSTANTS\nEGO_MODEL = \"vehicle.lincoln.mkz2017\"\nEGO_SPEED = 10\nSAFETY_DISTANCE = 20\nBRAKE_INTENSITY = 1.0\n\n##DEFINING BEHAVIORS\nbehavior AdversaryBehavior(trajectory):\n    do FollowTrajectoryBehavior(trajectory=trajectory)\n\nbehavior EgoBehavior(speed, trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=speed, trajectory=trajectory)\n        do FollowLaneBehavior(target_speed=speed)\n    interrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_INTENSITY)\n\n## DEFINING SPATIAL RELATIONS\n# Please refer to scenic/domains/driving/roads.py how to access detailed road infrastructure\n# 'network' is the 'class Network' object in roads.py\n\nfourWayIntersection = filter(lambda i: i.is4Way and not i.isSignalized, network.intersections)\n\n# make sure to put '*' to uniformly randomly select from all elements of the list\nintersec = Uniform(*fourWayIntersection)\nego_start_lane = Uniform(*intersec.incomingLanes)\n\nego_maneuver = Uniform(*ego_start_lane.maneuvers)\nego_trajectory = [ego_maneuver.startLane, ego_maneuver.connectingLane, ego_maneuver.endLane]\n\nadv_maneuver = Uniform(*ego_maneuver.conflictingManeuvers)\nadv_trajectory = [adv_maneuver.startLane, adv_maneuver.connectingLane, adv_maneuver.endLane]\nadv_start_lane = adv_maneuver.startLane\n\n## OBJECT PLACEMENT\nego_spawn_pt = OrientedPoint in ego_maneuver.startLane.centerline\nadv_spawn_pt = OrientedPoint in adv_maneuver.startLane.centerline\n\nego = Car at ego_spawn_pt,\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED, ego_trajectory)\n\nadversary = Car at adv_spawn_pt,\n    with behavior AdversaryBehavior(adv_trajectory)\n\nrequire 20 <= (distance to intersec) <= 25\nrequire 15 <= (distance from adversary to intersec) <= 20\nterminate when (distance to ego_spawn_pt) > 70",
    "name": "carlaChallenge10"
  },
  {
    "docstring": "Longitudinal control after leading vehicle\u2019s brake.\nThe leading vehicle decelerates suddenly due to an obstacle and the ego-vehicle must perform an emergency brake or an avoidance maneuver.",
    "has_docstring": true,
    "body": "## SET MAP AND MODEL (i.e. definitions of all referenceable vehicle types, road library, etc)\nparam map = localPath('../../../tests/formats/opendrive/maps/CARLA/Town01.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n## CONSTANTS\nEGO_MODEL = \"vehicle.lincoln.mkz2017\"\nEGO_SPEED = 10\nEGO_BRAKING_THRESHOLD = 12\n\nLEAD_CAR_SPEED = 10\nLEADCAR_BRAKING_THRESHOLD = 10\n\nBRAKE_ACTION = 1.0\n\n## DEFINING BEHAVIORS\n# EGO BEHAVIOR: Follow lane, and brake after passing a threshold distance to the leading car\nbehavior EgoBehavior(speed=10):\n    try:\n        do FollowLaneBehavior(speed)\n\n    interrupt when withinDistanceToAnyCars(self, EGO_BRAKING_THRESHOLD):\n        take SetBrakeAction(BRAKE_ACTION)\n\n# LEAD CAR BEHAVIOR: Follow lane, and brake after passing a threshold distance to obstacle\nbehavior LeadingCarBehavior(speed=10):\n    try: \n        do FollowLaneBehavior(speed)\n\n    interrupt when withinDistanceToAnyObjs(self, LEADCAR_BRAKING_THRESHOLD):\n        take SetBrakeAction(BRAKE_ACTION)\n\n## DEFINING SPATIAL RELATIONS\n# Please refer to scenic/domains/driving/roads.py how to access detailed road infrastructure\n# 'network' is the 'class Network' object in roads.py\n\n# make sure to put '*' to uniformly randomly select from all elements of the list, 'lanes'\nlane = Uniform(*network.lanes)\n\nobstacle = Trash on lane.centerline\n\nleadCar = Car following roadDirection from obstacle for Range(-50, -30),\n        with behavior LeadingCarBehavior(LEAD_CAR_SPEED)\n\nego = Car following roadDirection from leadCar for Range(-15, -10),\n        with blueprint EGO_MODEL,\n        with behavior EgoBehavior(EGO_SPEED)\n\nrequire (distance to intersection) > 80\nterminate when ego.speed < 0.1 and (distance to obstacle) < 30",
    "name": "carlaChallenge2"
  },
  {
    "docstring": "Obstacle avoidance without prior action.\nThe ego-vehicle encounters an obstacle / unexpected entity on the road and must perform an emergency brake or an avoidance maneuver.",
    "has_docstring": true,
    "body": "## SET MAP AND MODEL (i.e. definitions of all referenceable vehicle types, road library, etc)\nparam map = localPath('../../../tests/formats/opendrive/maps/CARLA/Town01.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n## CONSTANTS\nEGO_MODEL = \"vehicle.lincoln.mkz2017\"\nBICYCLE_MIN_SPEED = 1.5\nTHRESHOLD = 18\nBRAKE_ACTION = 1.0\nSAFETY_DISTANCE = 10\n\n## DEFINING BEHAVIORS\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(trajectory = trajectory)\n\n    interrupt when withinDistanceToObjsInLane(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_ACTION)\n\nbehavior BicycleBehavior(speed=3, threshold=15):\n    do CrossingBehavior(ego, speed, threshold)\n\n## DEFINING SPATIAL RELATIONS\n# make sure to put '*' to uniformly randomly select from all elements of the list\nintersec = Uniform(*network.intersections)\nstartLane = Uniform(*intersec.incomingLanes)\nmaneuver = Uniform(*startLane.maneuvers)\nego_trajectory = [maneuver.startLane, maneuver.connectingLane, maneuver.endLane]\n\nspot = OrientedPoint in maneuver.startLane.centerline\nego = Car at spot,\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(trajectory = ego_trajectory)\n\nspotBicycle = OrientedPoint in maneuver.endLane.centerline,\n    facing roadDirection\nbicycle = Bicycle at spotBicycle offset by 3.5@0,\n    with heading 90 deg relative to spotBicycle.heading,\n    with behavior BicycleBehavior(BICYCLE_MIN_SPEED, THRESHOLD),\n    with regionContainedIn None\n\nrequire 10 <= (distance to intersec) <= 15\nrequire 10 <= (distance from bicycle to intersec) <= 15\nterminate when (distance to spot) > 50",
    "name": "carlaChallenge4"
  },
  {
    "docstring": "Ego-vehicle must go around a blocking object using the opposite lane, yielding to oncoming traffic.",
    "has_docstring": true,
    "body": "param map = localPath('../../../tests/formats/opendrive/maps/CARLA/Town07.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town07'\nmodel scenic.domains.driving.model\n\n\n#CONSTANTS\nONCOMING_THROTTLE = 0.6\nEGO_SPEED = 7\nONCOMING_CAR_SPEED = 10\nDIST_THRESHOLD = 13\nYIELD_THRESHOLD = 5\nBLOCKING_CAR_DIST = Range(15, 20)\nBREAK_INTENSITY = 0.8\nBYPASS_DIST = 5\nDIST_BTW_BLOCKING_ONCOMING_CARS = 10\nDIST_TO_INTERSECTION = 15\n\n#EGO BEHAVIOR\nbehavior EgoBehavior(path):\n\tcurrent_lane = network.laneAt(self)\n\tlaneChangeCompleted = False\n\tbypassed = False\n\n\ttry:\n\t\tdo FollowLaneBehavior(EGO_SPEED, laneToFollow=current_lane)\n\n\tinterrupt when (distance to blockingCar) < DIST_THRESHOLD and not laneChangeCompleted:\n\t\tif ego can see oncomingCar:\n\t\t\ttake SetBrakeAction(BREAK_INTENSITY)\n\t\telif (distance to oncomingCar) > YIELD_THRESHOLD:\n\t\t\tdo LaneChangeBehavior(path, is_oppositeTraffic=True, target_speed=EGO_SPEED)\n\t\t\tdo FollowLaneBehavior(EGO_SPEED, is_oppositeTraffic=True) until (distance to blockingCar) > BYPASS_DIST\n\t\t\tlaneChangeCompleted = True\n\t\telse:\n\t\t\twait\n\n\tinterrupt when (blockingCar can see ego) and (distance to blockingCar) > BYPASS_DIST and not bypassed:\n\t\tcurrent_laneSection = network.laneSectionAt(self)\n\t\trightLaneSec = current_laneSection._laneToLeft\n\t\tdo LaneChangeBehavior(rightLaneSec, is_oppositeTraffic=False, target_speed=EGO_SPEED)\n\t\tbypassed = True\n\n\n#OTHER BEHAVIORS\nbehavior OncomingCarBehavior(path = []):\n\tdo FollowLaneBehavior(ONCOMING_CAR_SPEED)\n\n#GEOMETRY\n\n#Find lanes that have a lane to their left in the opposite direction\nlaneSecsWithLeftLane = []\nfor lane in network.lanes:\n\tfor laneSec in lane.sections:\n\t\tif laneSec._laneToLeft is not None:\n\t\t\tif laneSec._laneToLeft.isForward is not laneSec.isForward:\n\t\t\t\tlaneSecsWithLeftLane.append(laneSec)\n\nassert len(laneSecsWithLeftLane) > 0, \\\n\t'No lane sections with adjacent left lane with opposing \\\n\ttraffic direction in network.'\n\ninitLaneSec = Uniform(*laneSecsWithLeftLane)\nleftLaneSec = initLaneSec._laneToLeft\n\nspawnPt = OrientedPoint on initLaneSec.centerline\n\n#PLACEMENT\noncomingCar = Car on leftLaneSec.centerline,\n\twith behavior OncomingCarBehavior()\n\nego = Car at spawnPt,\n\twith behavior EgoBehavior(leftLaneSec)\n\t\nblockingCar = Car following roadDirection from ego for BLOCKING_CAR_DIST,\n\t\t\t\twith viewAngle 90 deg\n\n#Make sure the oncoming Car is at a visible section of the lane\nrequire blockingCar can see oncomingCar\nrequire (distance from blockingCar to oncomingCar) < DIST_BTW_BLOCKING_ONCOMING_CARS\nrequire (distance from blockingCar to intersection) > DIST_TO_INTERSECTION",
    "name": "carlaChallenge6"
  },
  {
    "docstring": "Unprotected left turn at intersection with oncoming traffic.\nThe ego-vehicle is performing an unprotected left turn at an intersection, yielding to oncoming traffic.",
    "has_docstring": true,
    "body": "## SET MAP AND MODEL (i.e. definitions of all referenceable vehicle types, road library, etc)\nparam map = localPath('../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n## CONSTANTS\nEGO_MODEL = \"vehicle.lincoln.mkz2017\"\nEGO_SPEED = 10\nSAFETY_DISTANCE = 20\nBRAKE_INTENSITY = 1.0\n\n## MONITORS\nmonitor TrafficLights:\n    freezeTrafficLights()\n    while True:\n        if withinDistanceToTrafficLight(ego, 100):\n            setClosestTrafficLightStatus(ego, \"green\")\n        if withinDistanceToTrafficLight(adversary, 100):\n            setClosestTrafficLightStatus(adversary, \"green\")\n        wait\n\n## DEFINING BEHAVIORS\nbehavior AdversaryBehavior(trajectory):\n    do FollowTrajectoryBehavior(trajectory=trajectory)\n\nbehavior EgoBehavior(speed, trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=speed, trajectory=trajectory)\n        do FollowLaneBehavior(target_speed=speed)\n    interrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_INTENSITY)\n\n## DEFINING SPATIAL RELATIONS\n# Please refer to scenic/domains/driving/roads.py how to access detailed road infrastructure\n# 'network' is the 'class Network' object in roads.py\n\n# The meaning of filter() function is explained in examples/carla/Carla_Challenge/carlaChallenge7.scenic\nfourWayIntersection = filter(lambda i: i.is4Way and i.isSignalized, network.intersections)\n\n# make sure to put '*' to uniformly randomly select from all elements of the list\nintersec = Uniform(*fourWayIntersection)\nego_start_lane = Uniform(*intersec.incomingLanes)\n\n# Get the ego manuever\nego_maneuvers = filter(lambda i: i.type == ManeuverType.LEFT_TURN, ego_start_lane.maneuvers)\nego_maneuver = Uniform(*ego_maneuvers)\nego_trajectory = [ego_maneuver.startLane, ego_maneuver.connectingLane, ego_maneuver.endLane]\n\nego_start_section = ego_maneuver.startLane.sections[-1]\n\n# Get the adversary maneuver\nadv_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, ego_maneuver.conflictingManeuvers)\nadv_maneuver = Uniform(*adv_maneuvers)\nadv_trajectory = [adv_maneuver.startLane, adv_maneuver.connectingLane, adv_maneuver.endLane]\n\nadv_start_lane = adv_maneuver.startLane\nadv_end_section = adv_maneuver.endLane.sections[0]\n\n## OBJECT PLACEMENT\nego_spawn_pt = OrientedPoint in ego_maneuver.startLane.centerline\nadv_spawn_pt = OrientedPoint in adv_maneuver.startLane.centerline\n\nego = Car at ego_spawn_pt,\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED, ego_trajectory)\n\nadversary = Car at adv_spawn_pt,\n    with behavior AdversaryBehavior(adv_trajectory)\n\nrequire (ego_start_section.laneToLeft == adv_end_section)  # make sure the ego and adversary are spawned in opposite lanes\nrequire 25 <= (distance to intersec) <= 30\nrequire 15 <= (distance from adversary to intersec) <= 20\nterminate when (distance to ego_spawn_pt) > 70",
    "name": "carlaChallenge8"
  },
  {
    "docstring": "Ego vehicle makes a left turn at 4-way intersection and must suddenly stop to avoid collision when adversary vehicle from opposite lane goes straight.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [15, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\nadvInitLane = Uniform(*intersection.incomingLanes)\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\n\negoInitLane = Uniform(*filter(lambda m:\n\t\tm.type is ManeuverType.STRAIGHT,\n\t\tadvManeuver.reverseManeuvers)\n\t).startLane\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\n\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "name": "intersection_02"
  },
  {
    "docstring": "Ego vehicle either goes straight or makes a left turn at 4-way intersection and must suddenly stop to avoid collision when adversary vehicle from lateral lane makes a left turn.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [15, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m:\n\t\tm.type in (ManeuverType.STRAIGHT, ManeuverType.LEFT_TURN),\n\t\tegoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\n\nadvInitLane = Uniform(*filter(lambda m:\n\t\tm.type is ManeuverType.STRAIGHT,\n\t\tUniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoInitLane.maneuvers))\n\t\t\t.conflictingManeuvers)\n\t).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\n\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "name": "intersection_04"
  },
  {
    "docstring": "Ego vehicle makes a right turn at 4-way intersection while adversary vehicle from lateral lane goes straight.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [10, 15]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.RIGHT_TURN, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\n\nadvInitLane = Uniform(*filter(lambda m:\n\t\tm.type is ManeuverType.STRAIGHT,\n\t\tUniform(*filter(lambda m: \n\t\t\tm.type is ManeuverType.STRAIGHT, \n\t\t\tegoInitLane.maneuvers)\n\t\t).conflictingManeuvers)\n\t).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\n\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "name": "intersection_06"
  },
  {
    "docstring": "Ego vehicle goes straight at 3-way intersection and must suddenly stop to avoid collision when adversary vehicle makes a left turn.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nEGO_INIT_DIST = [20, 40]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [0, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nintersection = Uniform(*filter(lambda i: i.is3Way, network.intersections))\n\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\n\nadvInitLane = Uniform(*filter(lambda m:\n\t\tm.type is ManeuverType.STRAIGHT,\n\t\tegoManeuver.reverseManeuvers)\n\t).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\n\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "name": "intersection_08"
  },
  {
    "docstring": "Ego Vehicle waits at 4-way intersection while adversary vehicle in adjacent lane passes before performing a lane change to bypass a stationary vehicle waiting to make a left turn.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nparam EGO_INIT_DIST = VerifaiRange(10, 15)\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nSTAT_INIT_DIST = [0, 5]\n\nADV_INIT_DIST = [15, 20]\nADV_SPEED = 10\n\nBYPASS_DIST = 8\nTERM_DIST = 70\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior():\n\twhile (distance to adversary) < BYPASS_DIST:\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\trightLaneSec = self.laneSection.laneToRight\n\tdo LaneChangeBehavior(\n\t\t\tlaneSectionToSwitch=rightLaneSec,\n\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\tdo FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\nstatInitLane = Uniform(*filter(lambda lane: \n\tall([sec._laneToRight is not None for sec in lane.sections]),\n\tintersection.incomingLanes))\nstatSpawnPt = OrientedPoint in statInitLane.centerline\n\nadvInitLane = statInitLane.sectionAt(statSpawnPt).laneToRight.lane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nstationary = Car at statSpawnPt,\n\twith blueprint MODEL\n\nego = Car behind stationary by globalParameters.EGO_INIT_DIST,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior()\n\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=ADV_SPEED, trajectory=advTrajectory)\n\nrequire STAT_INIT_DIST[0] <= (distance from stationary to intersection) <= STAT_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to statSpawnPt) > TERM_DIST",
    "name": "intersection_10"
  },
  {
    "docstring": "The car ahead of ego that is badly parked over the sidewalk cuts into ego vehicle's lane.",
    "has_docstring": true,
    "body": "param map = localPath('../../../tests/formats/opendrive/maps/CARLA/Town01.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town01'\nmodel scenic.domains.driving.model\n\nMAX_BREAK_THRESHOLD = 1\nSAFETY_DISTANCE = 8\nPARKING_SIDEWALK_OFFSET_RANGE = 2\nCUT_IN_TRIGGER_DISTANCE = Range(10, 12)\nEGO_SPEED = 8\nPARKEDCAR_SPEED = 7\n\nbehavior CutInBehavior(laneToFollow, target_speed):\n\twhile (distance from self to ego) > CUT_IN_TRIGGER_DISTANCE:\n\t\twait\n\n\tdo FollowLaneBehavior(laneToFollow = laneToFollow, target_speed=target_speed)\n\nbehavior CollisionAvoidance():\n\twhile withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n\t\ttake SetBrakeAction(MAX_BREAK_THRESHOLD)\n\n\nbehavior EgoBehavior(target_speed):\n\ttry: \n\t\tdo FollowLaneBehavior(target_speed=target_speed)\n\n\tinterrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n\t\tdo CollisionAvoidance()\n\n\nroads = network.roads\nselect_road = Uniform(*roads)\nego_lane = select_road.lanes[0]\n\nego = Car on ego_lane.centerline,\n\t\twith behavior EgoBehavior(target_speed=EGO_SPEED)\n\t\t\nspot = OrientedPoint on visible curb\nparkedHeadingAngle = Uniform(-1,1)*Range(10,20) deg\n\nother = Car left of (spot offset by PARKING_SIDEWALK_OFFSET_RANGE @ 0), facing parkedHeadingAngle relative to ego.heading,\n\t\t\twith behavior CutInBehavior(ego_lane, target_speed=PARKEDCAR_SPEED),\n\t\t\twith regionContainedIn None\n\nrequire (angle from ego to other) - ego.heading < 0 deg\nrequire 10 < (distance from ego to other) < 20",
    "name": "oas_scenario_06"
  },
  {
    "docstring": "Ego vehicle must suddenly stop to avoid collision when pedestrian crosses the road unexpectedly.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town01.xodr')\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nparam EGO_INIT_DIST = VerifaiRange(-30, -20)\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\n\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\n\nparam SAFETY_DIST = VerifaiRange(10, 15)\nBUFFER_DIST = 75\nCRASH_DIST = 5\nTERM_DIST = 50\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n    interrupt when withinDistanceToObjsInLane(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion):\n        take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nlane = Uniform(*network.lanes)\nspawnPt = OrientedPoint on lane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car following roadDirection from spawnPt for globalParameters.EGO_INIT_DIST,\n    with blueprint MODEL,\n    with behavior EgoBehavior()\n\nped = Pedestrian right of spawnPt by 3,\n    with heading 90 deg relative to spawnPt.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\n\nrequire (distance to intersection) > BUFFER_DIST\nrequire always (ego.laneSection._slowerLane is None)\nrequire always (ego.laneSection._fasterLane is None)\nterminate when (distance to spawnPt) > TERM_DIST",
    "name": "pedestrian_01"
  },
  {
    "docstring": "Ego vehicle makes a left turn at an intersection and must suddenly stop to avoid collision when pedestrian crosses the crosswalk.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\n\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\n\nparam SAFETY_DIST = VerifaiRange(10, 15)\nCRASH_DIST = 5\nTERM_DIST = 50\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion):\n        take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nintersection = Uniform(*filter(lambda i: i.is4Way or i.is3Way, network.intersections))\n\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, intersection.maneuvers))\negoInitLane = egoManeuver.startLane\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\n\ntempManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.RIGHT_TURN, egoManeuver.reverseManeuvers))\ntempInitLane = tempManeuver.startLane\ntempSpawnPt = tempInitLane.centerline[-1]\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\n\nped = Pedestrian right of tempSpawnPt by 3,\n    with heading ego.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "name": "pedestrian_03"
  },
  {
    "docstring": "Ego vehicle goes straight at an intersection and must yield when pedestrian crosses the crosswalk.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\n\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\n\nparam SAFETY_DIST = VerifaiRange(10, 15)\nCRASH_DIST = 5\nTERM_DIST = 50\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion):\n        take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nintersection = Uniform(*filter(lambda i: i.is4Way or i.is3Way, network.intersections))\n\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, intersection.maneuvers))\negoInitLane = egoManeuver.startLane\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\n\ntempManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoManeuver.reverseManeuvers))\ntempInitLane = tempManeuver.startLane\ntempSpawnPt = tempInitLane.centerline[-1]\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\n\nped = Pedestrian right of tempSpawnPt by 3,\n    with heading -90 deg relative to ego.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "name": "pedestrian_05"
  }
]

{
  "docstring": "TITLE: Bypassing 05\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle performs multiple lane changes to bypass three \nslow adversary vehicles.\nSOURCE: NHSTA, #16",
  "has_docstring": true,
  "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town03.xodr')\nparam carla_map = 'Town03'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nparam ADV1_DIST = VerifaiRange(20, 25)\nparam ADV2_DIST = globalParameters.ADV1_DIST + VerifaiRange(15, 20)\nparam ADV3_DIST = globalParameters.ADV2_DIST + VerifaiRange(15, 20)\nparam ADV_SPEED = VerifaiRange(2, 4)\n\nBYPASS_DIST = 15\nINIT_DIST = 50\nTERM_DIST = globalParameters.ADV3_DIST + 15\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior():\n\ttry:\n\t\tdo FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n\tinterrupt when ((distance to adversary_1) < BYPASS_DIST\n\t\t\t\t or (distance to adversary_3) < BYPASS_DIST):\n\t\tnewLaneSec = self.laneSection.laneToRight\n\t\tdo LaneChangeBehavior(\n\t\t\tlaneSectionToSwitch=newLaneSec,\n\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\tinterrupt when (distance to adversary_2) < BYPASS_DIST:\n\t\tnewLaneSec = self.laneSection.laneToLeft\n\t\tdo LaneChangeBehavior(\n\t\t\tlaneSectionToSwitch=newLaneSec,\n\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\nbehavior Adversary2Behavior():\n\trightLaneSec = self.laneSection.laneToRight\n\tdo LaneChangeBehavior(\n\t\tlaneSectionToSwitch=rightLaneSec,\n\t\ttarget_speed=globalParameters.ADV_SPEED)\n\tdo FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\ninitLane = Uniform(*filter(lambda lane:\n\tall([sec._laneToRight is not None for sec in lane.sections]),\n\tnetwork.lanes))\negoSpawnPt = OrientedPoint in initLane.centerline\negoLaneSecToSwitch = initLane.sectionAt(egoSpawnPt).laneToRight\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nadversary_1, adversary_2, adversary_3 = Car, Car, Car\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior()\n\nadversary_1 = Car following roadDirection for globalParameters.ADV1_DIST,\n\twith blueprint MODEL,\n\twith behavior FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\nadversary_2 = Car following roadDirection for globalParameters.ADV2_DIST,\n\twith blueprint MODEL,\n\twith behavior Adversary2Behavior()\n\nadversary_3 = Car following roadDirection for globalParameters.ADV3_DIST,\n\twith blueprint MODEL,\n\twith behavior FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary_1 to intersection) > INIT_DIST\nrequire (distance from adversary_2 to intersection) > INIT_DIST\nrequire (distance from adversary_3 to intersection) > INIT_DIST\nterminate when (distance to adversary_3) > TERM_DIST"
}
[
  {
    "docstring": "Ego vehicle performs a lane change to bypass a slow adversary vehicle before returning to its original lane.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town03.xodr')\nparam carla_map = 'Town03'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nparam EGO_SPEED = VerifaiRange(7, 10)\n\nparam ADV_DIST = VerifaiRange(10, 25)\nparam ADV_SPEED = VerifaiRange(2, 4)\n\nBYPASS_DIST = [15, 10]\nINIT_DIST = 50\nTERM_TIME = 5\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior():\n\ttry:\n\t\tdo FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n\tinterrupt when withinDistanceToAnyObjs(self, BYPASS_DIST[0]):\n\t\tfasterLaneSec = self.laneSection.fasterLane\n\t\tdo LaneChangeBehavior(\n\t\t\t\tlaneSectionToSwitch=fasterLaneSec,\n\t\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\t\tdo FollowLaneBehavior(\n\t\t\t\ttarget_speed=globalParameters.EGO_SPEED,\n\t\t\t\tlaneToFollow=fasterLaneSec.lane) \\\n\t\t\tuntil (distance to adversary) > BYPASS_DIST[1]\n\t\tslowerLaneSec = self.laneSection.slowerLane\n\t\tdo LaneChangeBehavior(\n\t\t\t\tlaneSectionToSwitch=slowerLaneSec,\n\t\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\t\tdo FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED) for TERM_TIME seconds\n\t\tterminate \n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\ninitLane = Uniform(*network.lanes)\negoSpawnPt = OrientedPoint in initLane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior()\n\nadversary = Car following roadDirection for globalParameters.ADV_DIST,\n\twith blueprint MODEL,\n\twith behavior FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary to intersection) > INIT_DIST\nrequire always (adversary.laneSection._fasterLane is not None)",
    "name": "bypassing_01"
  },
  {
    "docstring": "Ego vehicle performs a lane change to bypass a slow adversary vehicle but cannot return to its original lane because the adversary accelerates. Ego vehicle must then slow down to avoid collision with leading vehicle in new lane.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town03.xodr')\nparam carla_map = 'Town03'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.7, 1.0)\n\nparam ADV_DIST = VerifaiRange(10, 15)\nparam ADV_INIT_SPEED = VerifaiRange(2, 4)\nparam ADV_END_SPEED = 2 * VerifaiRange(7, 10)\nADV_BUFFER_TIME = 5\n\nLEAD_DIST = globalParameters.ADV_DIST + 10\nLEAD_SPEED = globalParameters.EGO_SPEED - 4\n\nBYPASS_DIST = [15, 10]\nSAFE_DIST = 15\nINIT_DIST = 50\nTERM_DIST = 70\nTERM_TIME = 10\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior DecelerateBehavior(brake):\n\ttake SetBrakeAction(brake)\n\nbehavior EgoBehavior():\n\ttry:\n\t\tdo FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n\tinterrupt when (distance to adversary) < BYPASS_DIST[0]:\n\t\tfasterLaneSec = self.laneSection.fasterLane\n\t\tdo LaneChangeBehavior(\n\t\t\t\tlaneSectionToSwitch=fasterLaneSec,\n\t\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\t\ttry:\n\t\t\tdo FollowLaneBehavior(\n\t\t\t\t\ttarget_speed=globalParameters.EGO_SPEED,\n\t\t\t\t\tlaneToFollow=fasterLaneSec.lane) \\\n\t\t\t\tuntil (distance to adversary) > BYPASS_DIST[1]\n\t\tinterrupt when (distance to lead) < SAFE_DIST:\n\t\t\ttry:\n\t\t\t\tdo DecelerateBehavior(globalParameters.EGO_BRAKE)\n\t\t\tinterrupt when (distance to lead) > SAFE_DIST:\n\t\t\t\tdo FollowLaneBehavior(target_speed=LEAD_SPEED) for TERM_TIME seconds\n\t\t\t\tterminate \n\nbehavior AdversaryBehavior():\n\tdo FollowLaneBehavior(target_speed=globalParameters.ADV_INIT_SPEED) \\\n\t\tuntil self.lane is not ego.lane\n\tdo FollowLaneBehavior(target_speed=globalParameters.ADV_END_SPEED)\n\nbehavior LeadBehavior():\n\tfasterLaneSec = self.laneSection.fasterLane\n\tdo LaneChangeBehavior(\n\t\t\tlaneSectionToSwitch=fasterLaneSec,\n\t\t\ttarget_speed=LEAD_SPEED)\n\tdo FollowLaneBehavior(target_speed=LEAD_SPEED)\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\ninitLane = Uniform(*network.lanes)\negoSpawnPt = OrientedPoint in initLane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior()\n\nadversary = Car following roadDirection for globalParameters.ADV_DIST,\n\twith blueprint MODEL,\n\twith behavior AdversaryBehavior()\n\nlead = Car following roadDirection for LEAD_DIST,\n\twith blueprint MODEL,\n\twith behavior LeadBehavior()\n\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary to intersection) > INIT_DIST\nrequire (distance from lead to intersection) > INIT_DIST\nrequire always (adversary.laneSection._fasterLane is not None)\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "name": "bypassing_03"
  },
  {
    "docstring": "Ego vehicle performs multiple lane changes to bypass three slow adversary vehicles.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town03.xodr')\nparam carla_map = 'Town03'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nparam ADV1_DIST = VerifaiRange(20, 25)\nparam ADV2_DIST = globalParameters.ADV1_DIST + VerifaiRange(15, 20)\nparam ADV3_DIST = globalParameters.ADV2_DIST + VerifaiRange(15, 20)\nparam ADV_SPEED = VerifaiRange(2, 4)\n\nBYPASS_DIST = 15\nINIT_DIST = 50\nTERM_DIST = globalParameters.ADV3_DIST + 15\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior():\n\ttry:\n\t\tdo FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n\tinterrupt when ((distance to adversary_1) < BYPASS_DIST\n\t\t\t\t or (distance to adversary_3) < BYPASS_DIST):\n\t\tnewLaneSec = self.laneSection.laneToRight\n\t\tdo LaneChangeBehavior(\n\t\t\tlaneSectionToSwitch=newLaneSec,\n\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\tinterrupt when (distance to adversary_2) < BYPASS_DIST:\n\t\tnewLaneSec = self.laneSection.laneToLeft\n\t\tdo LaneChangeBehavior(\n\t\t\tlaneSectionToSwitch=newLaneSec,\n\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\nbehavior Adversary2Behavior():\n\trightLaneSec = self.laneSection.laneToRight\n\tdo LaneChangeBehavior(\n\t\tlaneSectionToSwitch=rightLaneSec,\n\t\ttarget_speed=globalParameters.ADV_SPEED)\n\tdo FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\ninitLane = Uniform(*filter(lambda lane:\n\tall([sec._laneToRight is not None for sec in lane.sections]),\n\tnetwork.lanes))\negoSpawnPt = OrientedPoint in initLane.centerline\negoLaneSecToSwitch = initLane.sectionAt(egoSpawnPt).laneToRight\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nadversary_1, adversary_2, adversary_3 = Car, Car, Car\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior()\n\nadversary_1 = Car following roadDirection for globalParameters.ADV1_DIST,\n\twith blueprint MODEL,\n\twith behavior FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\nadversary_2 = Car following roadDirection for globalParameters.ADV2_DIST,\n\twith blueprint MODEL,\n\twith behavior Adversary2Behavior()\n\nadversary_3 = Car following roadDirection for globalParameters.ADV3_DIST,\n\twith blueprint MODEL,\n\twith behavior FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary_1 to intersection) > INIT_DIST\nrequire (distance from adversary_2 to intersection) > INIT_DIST\nrequire (distance from adversary_3 to intersection) > INIT_DIST\nterminate when (distance to adversary_3) > TERM_DIST",
    "name": "bypassing_05"
  },
  {
    "docstring": "Control loss without previous action.\nThe ego-vehicle loses control due to bad conditions on the road and it must recover, coming back to its original lane.",
    "has_docstring": true,
    "body": "## SET MAP AND MODEL (i.e. definitions of all referenceable vehicle types, road library, etc)\nparam map = localPath('../../../tests/formats/opendrive/maps/CARLA/Town01.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n## CONSTANTS\nEGO_MODEL = \"vehicle.lincoln.mkz2017\"\nEGO_SPEED = 10\n\n## DEFINING BEHAVIORS\n# EGO BEHAVIOR: Follow lane, and brake after passing a threshold distance to the leading car\nbehavior EgoBehavior(speed=10):\n    do FollowLaneBehavior(speed)\n\n## DEFINING SPATIAL RELATIONS\n# Please refer to scenic/domains/driving/roads.py how to access detailed road infrastructure\n# 'network' is the 'class Network' object in roads.py\n\n# make sure to put '*' to uniformly randomly select from all elements of the list, 'lanes'\nlane = Uniform(*network.lanes)\n\nstart = OrientedPoint on lane.centerline\nego = Car at start,\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED)\n\ndebris1 = Debris following roadDirection for Range(10, 20)\ndebris2 = Debris following roadDirection from debris1 for Range(5, 10)\ndebris3 = Debris following roadDirection from debris2 for Range(5, 10)\n\nrequire (distance to intersection) > 50\nterminate when (distance from debris3 to ego) > 10 and (distance to start) > 50",
    "name": "carlaChallenge1"
  },
  {
    "docstring": "Obstacle avoidance without prior action.\nThe ego-vehicle encounters an obstacle / unexpected entity on the road and must perform an emergency brake or an avoidance maneuver.",
    "has_docstring": true,
    "body": "# SET MAP AND MODEL (i.e. definitions of all referenceable vehicle types, road library, etc)\nparam map = localPath('../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n# CONSTANTS\nEGO_MODEL = \"vehicle.lincoln.mkz2017\"\nEGO_SPEED = 10\nSAFETY_DISTANCE = 10\nBRAKE_INTENSITY = 1.0\n\nPEDESTRIAN_MIN_SPEED = 1.0\nTHRESHOLD = 20\n\n# EGO BEHAVIOR: Follow lane and brake when reaches threshold distance to obstacle\nbehavior EgoBehavior(speed=10):\n    try:\n        do FollowLaneBehavior(target_speed=speed)\n    interrupt when withinDistanceToObjsInLane(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_INTENSITY)\n\nbehavior PedestrianBehavior(min_speed=1, threshold=10):\n    do CrossingBehavior(ego, min_speed, threshold)\n\n## DEFINING SPATIAL RELATIONS\n# Please refer to scenic/domains/driving/roads.py how to access detailed road infrastructure\n# 'network' is the 'class Network' object in roads.py \n\n# make sure to put '*' to uniformly randomly select from all elements of the list, 'network.lanes'\nlane = Uniform(*network.lanes)\n\nspot = OrientedPoint on lane.centerline\nvending_spot = OrientedPoint following roadDirection from spot for -3\n\npedestrian = Pedestrian right of spot by 3,\n    with heading 90 deg relative to spot.heading,\n    with regionContainedIn None,\n    with behavior PedestrianBehavior(PEDESTRIAN_MIN_SPEED, THRESHOLD)\n\nvending_machine = VendingMachine right of vending_spot by 3,\n    with heading -90 deg relative to vending_spot.heading,\n    with regionContainedIn None\n\nego = Car following roadDirection from spot for Range(-30, -20),\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED)\n\nrequire (distance to intersection) > 75\nrequire (ego.laneSection._slowerLane is None)\nterminate when (distance to spot) > 50",
    "name": "carlaChallenge3_dynamic"
  },
  {
    "docstring": "Ego-vehicle performs a lane changing to evade a leading vehicle, which is moving too slowly.",
    "has_docstring": true,
    "body": "param carla_map = 'Town05'\nmodel scenic.domains.driving.model\n\n#CONSTANTS\nEGO_SPEED = 10\nSLOW_CAR_SPEED = 6\nEGO_TO_BICYCLE = 10\nDIST_THRESHOLD = 15\n\n#EGO BEHAVIOR: Follow lane, then perform a lane change\nbehavior EgoBehavior(leftpath, origpath=[]):\n\tlaneChangeCompleted = False\n\n\ttry: \n\t\tdo FollowLaneBehavior(EGO_SPEED)\n\n\tinterrupt when withinDistanceToAnyObjs(self, DIST_THRESHOLD) and not laneChangeCompleted:\n\t\tdo LaneChangeBehavior(laneSectionToSwitch=leftpath, target_speed=10)\n\t\tlaneChangeCompleted = True\n\n#OTHER BEHAVIOR\nbehavior SlowCarBehavior():\n\tdo FollowLaneBehavior(SLOW_CAR_SPEED)\n\n#GEOMETRY\nlaneSecsWithRightLane = []\nfor lane in network.lanes:\n\tfor laneSec in lane.sections:\n\t\tif laneSec._laneToRight != None:\n\t\t\tlaneSecsWithRightLane.append(laneSec)\n\nassert len(laneSecsWithRightLane) > 0, \\\n\t'No lane sections with adjacent left lane in network.'\n\ninitLaneSec = Uniform(*laneSecsWithRightLane)\nrightLane = initLaneSec._laneToRight\n\n#PLACEMENT\nspawnPt = OrientedPoint on initLaneSec.centerline\n\nego = Car at spawnPt,\n\twith behavior EgoBehavior(rightLane, [initLaneSec])\n\ncyclist = Car following roadDirection from ego for EGO_TO_BICYCLE,\n\twith behavior SlowCarBehavior()\n\nrequire (distance from ego to intersection) > 10\nrequire (distance from cyclist to intersection) > 10",
    "name": "carlaChallenge5"
  },
  {
    "docstring": "Ego-vehicle is going straight at an intersection but a crossing vehicle runs a red light, forcing the ego-vehicle to perform a collision avoidance maneuver.",
    "has_docstring": true,
    "body": "param carla_map = 'Town05'\nmodel scenic.domains.driving.model\n\nDELAY_TIME_1 = 1 # the delay time for ego\nDELAY_TIME_2 = 40 # the delay time for the slow car\nFOLLOWING_DISTANCE = 13 # normally 10, 40 when DELAY_TIME is 25, 50 to prevent collisions\n\nDISTANCE_TO_INTERSECTION1 = Uniform(15, 20) * -1\nDISTANCE_TO_INTERSECTION2 = Uniform(10, 15) * -1\nSAFETY_DISTANCE = 20\nBRAKE_INTENSITY = 1.0\n\n\nbehavior CrossingCarBehavior(trajectory):\n\twhile True:\n\t\tdo FollowTrajectoryBehavior(trajectory = trajectory)\n\nbehavior EgoBehavior(trajectory):\n\t\n\ttry:\n\t\tdo FollowTrajectoryBehavior(trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n\t\ttake SetBrakeAction(BRAKE_INTENSITY)\n\n\nspawnAreas = []\nfourWayIntersection = filter(lambda i: i.is4Way, network.intersections)\nintersec = Uniform(*fourWayIntersection)\n\nstartLane = Uniform(*intersec.incomingLanes)\nstraight_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, startLane.maneuvers)\nstraight_maneuver = Uniform(*straight_maneuvers)\nego_trajectory = [straight_maneuver.startLane, straight_maneuver.connectingLane, straight_maneuver.endLane]\n\nconflicting_straight_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, straight_maneuver.conflictingManeuvers)\ncsm = Uniform(*conflicting_straight_maneuvers)\ncrossing_startLane = csm.startLane\ncrossing_car_trajectory = [csm.startLane, csm.connectingLane, csm.endLane]\n\nego_spwPt = startLane.centerline[-1]\ncsm_spwPt = crossing_startLane.centerline[-1]\n\nego = Car following roadDirection from ego_spwPt for DISTANCE_TO_INTERSECTION1,\n\t\twith behavior EgoBehavior(trajectory = ego_trajectory)\n\ncrossing_car = Car following roadDirection from csm_spwPt for DISTANCE_TO_INTERSECTION2,\n\t\t\t\twith behavior CrossingCarBehavior(crossing_car_trajectory)\n\n\n\"\"\"Note: Traffic light is currently not controlled but this functionality will be added very soon \"\"\"",
    "name": "carlaChallenge7"
  },
  {
    "docstring": "Ego-vehicle is performing a right turn at an intersection, yielding to crossing traffic.",
    "has_docstring": true,
    "body": "param carla_map = 'Town05'\nmodel scenic.domains.driving.model\n\nDELAY_TIME_1 = 1 # the delay time for ego\nDELAY_TIME_2 = 40 # the delay time for the slow car\nFOLLOWING_DISTANCE = 13 # normally 10, 40 when DELAY_TIME is 25, 50 to prevent collisions\n\nDISTANCE_TO_INTERSECTION1 = Uniform(10, 15) * -1\nDISTANCE_TO_INTERSECTION2 = Uniform(15, 20) * -1\nSAFETY_DISTANCE = 20\nBRAKE_INTENSITY = 1.0\n\n\nbehavior CrossingCarBehavior(trajectory):\n\tdo FollowTrajectoryBehavior(trajectory = trajectory)\n\tterminate\n\nbehavior EgoBehavior(trajectory):\n\ttry :\n\t\tdo FollowTrajectoryBehavior(trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n\t\ttake SetBrakeAction(BRAKE_INTENSITY)\n\n\nspawnAreas = []\nfourWayIntersection = filter(lambda i: i.is4Way, network.intersections)\nintersec = Uniform(*fourWayIntersection)\n\nstartLane = Uniform(*intersec.incomingLanes)\nstraight_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, startLane.maneuvers)\nstraight_maneuver = Uniform(*straight_maneuvers)\nstraight_trajectory = [straight_maneuver.startLane, straight_maneuver.connectingLane, straight_maneuver.endLane]\n\nconflicting_rightTurn_maneuvers = filter(lambda i: i.type == ManeuverType.RIGHT_TURN, straight_maneuver.conflictingManeuvers)\nego_rightTurn_maneuver = Uniform(*conflicting_rightTurn_maneuvers)\nego_startLane = ego_rightTurn_maneuver.startLane\nego_trajectory = [ego_rightTurn_maneuver.startLane, ego_rightTurn_maneuver.connectingLane, \\\n\t\t\t\t\t\t\t\tego_rightTurn_maneuver.endLane]\n\nspwPt = startLane.centerline[-1]\ncsm_spwPt = ego_startLane.centerline[-1]\n\ncrossing_car = Car following roadDirection from spwPt for DISTANCE_TO_INTERSECTION1,\n\t\t\t\twith behavior CrossingCarBehavior(trajectory = straight_trajectory)\n\nego = Car following roadDirection from csm_spwPt for DISTANCE_TO_INTERSECTION2,\n\t\t\t\twith behavior EgoBehavior(ego_trajectory)",
    "name": "carlaChallenge9"
  },
  {
    "docstring": "Ego vehicle goes straight at 4-way intersection and must suddenly stop to avoid collision when adversary vehicle from opposite lane makes a left turn.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [15, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\n\nadvInitLane = Uniform(*filter(lambda m:\n\t\tm.type is ManeuverType.STRAIGHT,\n\t\tegoManeuver.reverseManeuvers)\n\t).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\n\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "name": "intersection_01"
  },
  {
    "docstring": "Ego vehicle either goes straight or makes a left turn at 4-way intersection and must suddenly stop to avoid collision when adversary vehicle from lateral lane continues straight.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [15, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m:\n\t\tm.type in (ManeuverType.STRAIGHT, ManeuverType.LEFT_TURN),\n\t\tegoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\n\nadvInitLane = Uniform(*filter(lambda m:\n\t\tm.type is ManeuverType.STRAIGHT,\n\t\tUniform(*filter(lambda m: \n\t\t\tm.type is ManeuverType.STRAIGHT, \n\t\t\tegoInitLane.maneuvers)\n\t\t).conflictingManeuvers)\n\t).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\n\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "name": "intersection_03"
  },
  {
    "docstring": "Ego vehicle makes a right turn at 4-way intersection while adversary vehicle from opposite lane makes a left turn.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [5, 15]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.RIGHT_TURN, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\n\nadvInitLane = Uniform(*filter(lambda m:\n\t\tm.type is ManeuverType.STRAIGHT,\n\t\tUniform(*filter(lambda m: \n\t\t\tm.type is ManeuverType.STRAIGHT, \n\t\t\tegoInitLane.maneuvers)\n\t\t).reverseManeuvers)\n\t).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\n\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "name": "intersection_05"
  },
  {
    "docstring": "Ego vehicle makes a left turn at 3-way intersection and must suddenly stop to avoid collision when adversary vehicle from lateral lane continues straight.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nEGO_INIT_DIST = [20, 40]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [0, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nintersection = Uniform(*filter(lambda i: i.is3Way, network.intersections))\n\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\n\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoManeuver.conflictingManeuvers))\nadvInitLane = advManeuver.startLane\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\n\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "name": "intersection_07"
  },
  {
    "docstring": "Ego vehicle makes a right turn at 3-way intersection while adversary vehicle from lateral lane goes straight.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\n\nADV_INIT_DIST = [10, 15]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nintersection = Uniform(*filter(lambda i: i.is3Way, network.intersections))\n\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.RIGHT_TURN, intersection.maneuvers))\negoInitLane = egoManeuver.startLane\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\n\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoManeuver.conflictingManeuvers))\nadvInitLane = advManeuver.startLane\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\n\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "name": "intersection_09"
  },
  {
    "docstring": "The lead car suddenly stops and then resumes moving forward",
    "has_docstring": true,
    "body": "param map = localPath('../../../tests/formats/opendrive/maps/CARLA/Town01.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town01'\nmodel scenic.domains.driving.model\n\nMAX_BREAK_THRESHOLD = 1\nSAFETY_DISTANCE = 10\nINITIAL_DISTANCE_APART = -1 * Uniform(5, 10)\nSTEPS_PER_SEC = 10\n\nbehavior LeadCarBehavior():\n\ttry:\n\t\tdo FollowLaneBehavior()\n\tinterrupt when 5 * STEPS_PER_SEC < simulation().currentTime and simulation().currentTime < 6 * STEPS_PER_SEC:\n\t\ttake SetBrakeAction(MAX_BREAK_THRESHOLD)\n\nbehavior CollisionAvoidance():\n\twhile withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n\t\ttake SetBrakeAction(MAX_BREAK_THRESHOLD)\n\n\nbehavior FollowLeadCarBehavior():\n\n\ttry: \n\t\tdo FollowLaneBehavior()\n\n\tinterrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n\t\tdo CollisionAvoidance()\n\n\nroads = network.roads\nselect_road = Uniform(*roads)\nselect_lane = Uniform(*select_road.lanes)\n\nother = Car on select_lane.centerline,\n\t\twith behavior LeadCarBehavior()\n\nego = Car following roadDirection from other for INITIAL_DISTANCE_APART,\n\t\twith behavior FollowLeadCarBehavior()",
    "name": "oas_scenario_05"
  },
  {
    "docstring": "Both ego and adversary vehicles must suddenly stop to avoid collision when pedestrian crosses the road unexpectedly.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town01.xodr')\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nparam EGO_INIT_DIST = VerifaiRange(-30, -20)\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\n\nparam ADV_INIT_DIST = VerifaiRange(40, 50)\nparam ADV_SPEED = VerifaiRange(7, 10)\nADV_BRAKE = 1.0\n\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\n\nparam SAFETY_DIST = VerifaiRange(10, 15)\nBUFFER_DIST = 75\nCRASH_DIST = 5\nTERM_DIST = 50\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n    interrupt when withinDistanceToObjsInLane(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion):\n        take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\nbehavior AdvBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n    interrupt when (withinDistanceToObjsInLane(self, globalParameters.SAFETY_DIST) or (distance from adv to ped) < 10) and (ped in network.drivableRegion):\n        take SetBrakeAction(ADV_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nroad = Uniform(*filter(lambda r: len(r.forwardLanes.lanes) == len(r.backwardLanes.lanes) == 1, network.roads))\negoLane = Uniform(road.forwardLanes.lanes)[0]\nspawnPt = OrientedPoint on egoLane.centerline\nadvSpawnPt = OrientedPoint following roadDirection from spawnPt for globalParameters.ADV_INIT_DIST\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car following roadDirection from spawnPt for globalParameters.EGO_INIT_DIST,\n    with blueprint MODEL,\n    with behavior EgoBehavior()\n\nped = Pedestrian right of spawnPt by 3,\n    with heading 90 deg relative to spawnPt.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\n\nadv = Car left of advSpawnPt by 3,\n    with blueprint MODEL,\n    with heading 180 deg relative to spawnPt.heading,\n    with behavior AdvBehavior()\n\nrequire (distance from spawnPt to intersection) > BUFFER_DIST\nrequire always (ego.laneSection._slowerLane is None)\nrequire always (ego.laneSection._fasterLane is None)\nrequire always (adv.laneSection._slowerLane is None)\nrequire always (adv.laneSection._fasterLane is None)\nterminate when (distance to spawnPt) > TERM_DIST",
    "name": "pedestrian_02"
  },
  {
    "docstring": "Ego vehicle makes a right turn at an intersection and must yield when pedestrian crosses the crosswalk.",
    "has_docstring": true,
    "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\n\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\n\nparam SAFETY_DIST = VerifaiRange(10, 15)\nCRASH_DIST = 5\nTERM_DIST = 50\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior(trajectory):\n    flag = True\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion) and flag:\n        flag = False\n        while withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST + 3):\n            take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nintersection = Uniform(*filter(lambda i: i.is4Way or i.is3Way, network.intersections))\n\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.RIGHT_TURN, intersection.maneuvers))\negoInitLane = egoManeuver.startLane\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\n\ntempSpawnPt = egoInitLane.centerline[-1]\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\n\nped = Pedestrian right of tempSpawnPt by 5,\n    with heading ego.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "name": "pedestrian_04"
  }
]

{
  "docstring": "TITLE: Pedestrian 01\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle must suddenly stop to avoid collision when \npedestrian crosses the road unexpectedly.\nSOURCE: Carla Challenge, #03",
  "has_docstring": true,
  "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town01.xodr')\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nparam EGO_INIT_DIST = VerifaiRange(-30, -20)\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\n\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\n\nparam SAFETY_DIST = VerifaiRange(10, 15)\nBUFFER_DIST = 75\nCRASH_DIST = 5\nTERM_DIST = 50\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n    interrupt when withinDistanceToObjsInLane(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion):\n        take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nlane = Uniform(*network.lanes)\nspawnPt = OrientedPoint on lane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car following roadDirection from spawnPt for globalParameters.EGO_INIT_DIST,\n    with blueprint MODEL,\n    with behavior EgoBehavior()\n\nped = Pedestrian right of spawnPt by 3,\n    with heading 90 deg relative to spawnPt.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\n\nrequire (distance to intersection) > BUFFER_DIST\nrequire always (ego.laneSection._slowerLane is None)\nrequire always (ego.laneSection._fasterLane is None)\nterminate when (distance to spawnPt) > TERM_DIST"
}
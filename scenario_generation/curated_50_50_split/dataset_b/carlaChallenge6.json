{
  "docstring": "Scenario Description\nBased on CARLA Challenge Scenario 6: https://carlachallenge.org/challenge/nhtsa/\nEgo-vehicle must go around a blocking object\nusing the opposite lane, yielding to oncoming traffic.",
  "has_docstring": true,
  "body": "param map = localPath('../../../tests/formats/opendrive/maps/CARLA/Town07.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town07'\nmodel scenic.domains.driving.model\n\n\n#CONSTANTS\nONCOMING_THROTTLE = 0.6\nEGO_SPEED = 7\nONCOMING_CAR_SPEED = 10\nDIST_THRESHOLD = 13\nYIELD_THRESHOLD = 5\nBLOCKING_CAR_DIST = Range(15, 20)\nBREAK_INTENSITY = 0.8\nBYPASS_DIST = 5\nDIST_BTW_BLOCKING_ONCOMING_CARS = 10\nDIST_TO_INTERSECTION = 15\n\n#EGO BEHAVIOR\nbehavior EgoBehavior(path):\n\tcurrent_lane = network.laneAt(self)\n\tlaneChangeCompleted = False\n\tbypassed = False\n\n\ttry:\n\t\tdo FollowLaneBehavior(EGO_SPEED, laneToFollow=current_lane)\n\n\tinterrupt when (distance to blockingCar) < DIST_THRESHOLD and not laneChangeCompleted:\n\t\tif ego can see oncomingCar:\n\t\t\ttake SetBrakeAction(BREAK_INTENSITY)\n\t\telif (distance to oncomingCar) > YIELD_THRESHOLD:\n\t\t\tdo LaneChangeBehavior(path, is_oppositeTraffic=True, target_speed=EGO_SPEED)\n\t\t\tdo FollowLaneBehavior(EGO_SPEED, is_oppositeTraffic=True) until (distance to blockingCar) > BYPASS_DIST\n\t\t\tlaneChangeCompleted = True\n\t\telse:\n\t\t\twait\n\n\tinterrupt when (blockingCar can see ego) and (distance to blockingCar) > BYPASS_DIST and not bypassed:\n\t\tcurrent_laneSection = network.laneSectionAt(self)\n\t\trightLaneSec = current_laneSection._laneToLeft\n\t\tdo LaneChangeBehavior(rightLaneSec, is_oppositeTraffic=False, target_speed=EGO_SPEED)\n\t\tbypassed = True\n\n\n#OTHER BEHAVIORS\nbehavior OncomingCarBehavior(path = []):\n\tdo FollowLaneBehavior(ONCOMING_CAR_SPEED)\n\n#GEOMETRY\n\n#Find lanes that have a lane to their left in the opposite direction\nlaneSecsWithLeftLane = []\nfor lane in network.lanes:\n\tfor laneSec in lane.sections:\n\t\tif laneSec._laneToLeft is not None:\n\t\t\tif laneSec._laneToLeft.isForward is not laneSec.isForward:\n\t\t\t\tlaneSecsWithLeftLane.append(laneSec)\n\nassert len(laneSecsWithLeftLane) > 0, \\\n\t'No lane sections with adjacent left lane with opposing \\\n\ttraffic direction in network.'\n\ninitLaneSec = Uniform(*laneSecsWithLeftLane)\nleftLaneSec = initLaneSec._laneToLeft\n\nspawnPt = OrientedPoint on initLaneSec.centerline\n\n#PLACEMENT\noncomingCar = Car on leftLaneSec.centerline,\n\twith behavior OncomingCarBehavior()\n\nego = Car at spawnPt,\n\twith behavior EgoBehavior(leftLaneSec)\n\t\nblockingCar = Car following roadDirection from ego for BLOCKING_CAR_DIST,\n\t\t\t\twith viewAngle 90 deg\n\n#Make sure the oncoming Car is at a visible section of the lane\nrequire blockingCar can see oncomingCar\nrequire (distance from blockingCar to oncomingCar) < DIST_BTW_BLOCKING_ONCOMING_CARS\nrequire (distance from blockingCar to intersection) > DIST_TO_INTERSECTION"
}
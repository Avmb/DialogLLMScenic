{
  "docstring": "TITLE: Intersection 04\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle either goes straight or makes a left turn at \n4-way intersection and must suddenly stop to avoid collision when \nadversary vehicle from lateral lane makes a left turn.\nSOURCE: NHSTA, #28 #29",
  "has_docstring": true,
  "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [15, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m:\n\t\tm.type in (ManeuverType.STRAIGHT, ManeuverType.LEFT_TURN),\n\t\tegoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\n\nadvInitLane = Uniform(*filter(lambda m:\n\t\tm.type is ManeuverType.STRAIGHT,\n\t\tUniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoInitLane.maneuvers))\n\t\t\t.conflictingManeuvers)\n\t).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\n\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST"
}
{
  "docstring": "TITLE: Pedestrian 03\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle makes a left turn at an intersection and must \nsuddenly stop to avoid collision when pedestrian crosses the crosswalk.\nSOURCE: Carla Challenge, #04",
  "has_docstring": true,
  "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\n\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\n\nparam SAFETY_DIST = VerifaiRange(10, 15)\nCRASH_DIST = 5\nTERM_DIST = 50\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion):\n        take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nintersection = Uniform(*filter(lambda i: i.is4Way or i.is3Way, network.intersections))\n\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, intersection.maneuvers))\negoInitLane = egoManeuver.startLane\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\n\ntempManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.RIGHT_TURN, egoManeuver.reverseManeuvers))\ntempInitLane = tempManeuver.startLane\ntempSpawnPt = tempInitLane.centerline[-1]\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\n\nped = Pedestrian right of tempSpawnPt by 3,\n    with heading ego.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST"
}
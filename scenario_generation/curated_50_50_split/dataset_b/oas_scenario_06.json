{
  "docstring": "Scenario Description\nVoyage OAS Scenario Unique ID: 2-2-XX-CF-STR-CAR:Pa>E:03\nThe car ahead of ego that is badly parked over the sidewalk cuts into ego vehicle's lane.\nThis scenario may fail if there exists any obstacle (e.g. fences) on the sidewalk",
  "has_docstring": true,
  "body": "param map = localPath('../../../tests/formats/opendrive/maps/CARLA/Town01.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town01'\nmodel scenic.domains.driving.model\n\nMAX_BREAK_THRESHOLD = 1\nSAFETY_DISTANCE = 8\nPARKING_SIDEWALK_OFFSET_RANGE = 2\nCUT_IN_TRIGGER_DISTANCE = Range(10, 12)\nEGO_SPEED = 8\nPARKEDCAR_SPEED = 7\n\nbehavior CutInBehavior(laneToFollow, target_speed):\n\twhile (distance from self to ego) > CUT_IN_TRIGGER_DISTANCE:\n\t\twait\n\n\tdo FollowLaneBehavior(laneToFollow = laneToFollow, target_speed=target_speed)\n\nbehavior CollisionAvoidance():\n\twhile withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n\t\ttake SetBrakeAction(MAX_BREAK_THRESHOLD)\n\n\nbehavior EgoBehavior(target_speed):\n\ttry: \n\t\tdo FollowLaneBehavior(target_speed=target_speed)\n\n\tinterrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n\t\tdo CollisionAvoidance()\n\n\nroads = network.roads\nselect_road = Uniform(*roads)\nego_lane = select_road.lanes[0]\n\nego = Car on ego_lane.centerline,\n\t\twith behavior EgoBehavior(target_speed=EGO_SPEED)\n\t\t\nspot = OrientedPoint on visible curb\nparkedHeadingAngle = Uniform(-1,1)*Range(10,20) deg\n\nother = Car left of (spot offset by PARKING_SIDEWALK_OFFSET_RANGE @ 0), facing parkedHeadingAngle relative to ego.heading,\n\t\t\twith behavior CutInBehavior(ego_lane, target_speed=PARKEDCAR_SPEED),\n\t\t\twith regionContainedIn None\n\nrequire (angle from ego to other) - ego.heading < 0 deg\nrequire 10 < (distance from ego to other) < 20"
}
{
  "docstring": "Scenario Description\nTraffic Scenario 04.\nObstacle avoidance without prior action.\nThe ego-vehicle encounters an obstacle / unexpected entity on the road and must perform an\nemergency brake or an avoidance maneuver.",
  "has_docstring": true,
  "body": "## SET MAP AND MODEL (i.e. definitions of all referenceable vehicle types, road library, etc)\nparam map = localPath('../../../tests/formats/opendrive/maps/CARLA/Town01.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n## CONSTANTS\nEGO_MODEL = \"vehicle.lincoln.mkz2017\"\nBICYCLE_MIN_SPEED = 1.5\nTHRESHOLD = 18\nBRAKE_ACTION = 1.0\nSAFETY_DISTANCE = 10\n\n## DEFINING BEHAVIORS\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(trajectory = trajectory)\n\n    interrupt when withinDistanceToObjsInLane(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_ACTION)\n\nbehavior BicycleBehavior(speed=3, threshold=15):\n    do CrossingBehavior(ego, speed, threshold)\n\n## DEFINING SPATIAL RELATIONS\n# make sure to put '*' to uniformly randomly select from all elements of the list\nintersec = Uniform(*network.intersections)\nstartLane = Uniform(*intersec.incomingLanes)\nmaneuver = Uniform(*startLane.maneuvers)\nego_trajectory = [maneuver.startLane, maneuver.connectingLane, maneuver.endLane]\n\nspot = OrientedPoint in maneuver.startLane.centerline\nego = Car at spot,\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(trajectory = ego_trajectory)\n\nspotBicycle = OrientedPoint in maneuver.endLane.centerline,\n    facing roadDirection\nbicycle = Bicycle at spotBicycle offset by 3.5@0,\n    with heading 90 deg relative to spotBicycle.heading,\n    with behavior BicycleBehavior(BICYCLE_MIN_SPEED, THRESHOLD),\n    with regionContainedIn None\n\nrequire 10 <= (distance to intersec) <= 15\nrequire 10 <= (distance from bicycle to intersec) <= 15\nterminate when (distance to spot) > 50"
}
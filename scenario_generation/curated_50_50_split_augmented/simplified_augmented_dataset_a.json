[
  {
    "augmented_docstrings": [
      "Ego vehicle bypasses an adversary vehicle by changing lanes and then returning.",
      "Ego vehicle changes lanes to bypass an adversary vehicle and then changes back to the original lane.",
      "Ego vehicle must successfully bypass an adversary vehicle by changing lanes and accelerating.",
      "Ego vehicle performs a lane change maneuver to bypass a slower adversary vehicle.",
      "Ego vehicle performs a lane change maneuver to bypass an adversary vehicle.",
      "Ego vehicle performs a lane change to bypass a slow adversary vehicle.",
      "Ego vehicle performs a lane change to bypass an adversary vehicle.",
      "Ego vehicle performs a lane-change maneuver to bypass an adversary vehicle.",
      "Ego vehicle performs an lane change to bypass an adversary vehicle.",
      "Ego vehicle performs lane change to bypass a slow adversary vehicle.",
      "Ego vehicle performs lane change to bypass an adversary vehicle.",
      "Ego vehicle performs multiple lane changes to bypass a slow adversary vehicle.",
      "The ego vehicle attempts to bypass a slow-moving adversary vehicle by changing lanes."
    ],
    "body": "param carla_map = 'Town03'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam ADV_DIST = VerifaiRange(10, 25)\nparam ADV_SPEED = VerifaiRange(2, 4)\nBYPASS_DIST = [15, 10]\nINIT_DIST = 50\nTERM_TIME = 5\nbehavior EgoBehavior():\n\ttry:\n\t\tdo FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n\tinterrupt when withinDistanceToAnyObjs(self, BYPASS_DIST[0]):\n\t\tfasterLaneSec = self.laneSection.fasterLane\n\t\tdo LaneChangeBehavior(\n\t\t\t\tlaneSectionToSwitch=fasterLaneSec,\n\t\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\t\tdo FollowLaneBehavior(\n\t\t\t\ttarget_speed=globalParameters.EGO_SPEED,\n\t\t\t\tlaneToFollow=fasterLaneSec.lane) \\\n\t\t\tuntil (distance to adversary) > BYPASS_DIST[1]\n\t\tslowerLaneSec = self.laneSection.slowerLane\n\t\tdo LaneChangeBehavior(\n\t\t\t\tlaneSectionToSwitch=slowerLaneSec,\n\t\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\t\tdo FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED) for TERM_TIME seconds\n\t\tterminate \ninitLane = Uniform(*network.lanes)\negoSpawnPt = OrientedPoint in initLane.centerline\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior()\nadversary = Car following roadDirection for globalParameters.ADV_DIST,\n\twith blueprint MODEL,\n\twith behavior FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary to intersection) > INIT_DIST\nrequire always (adversary.laneSection._fasterLane is not None)",
    "docstring": "Ego vehicle performs a lane change to bypass a slow adversary vehicle before returning to its original lane.",
    "has_docstring": true,
    "name": "bypassing_01"
  },
  {
    "augmented_docstrings": [
      "Ego vehicle is forced to change lanes and decelerate to a safe speed in order to avoid crashing into a slower lead vehicle when an adversary vehicle is blocking the lane.",
      "Ego vehicle performs a lane change and decelerates to a safe speed to bypass a slow adversary vehicle and a lead vehicle before returning to its original lane.",
      "Ego vehicle performs a lane change and decelerates to safely pass a slow adversary vehicle before returning to its original lane. Lead vehicle is introduced to drive the ego vehicle to complete the scenario.",
      "Ego vehicle performs a lane change to bypass a slow adversary vehicle and decelerates to avoid collision with the lead vehicle.",
      "Ego vehicle performs a lane change to bypass a slow adversary vehicle and must decelerate to avoid collision with a faster lead vehicle.",
      "Ego vehicle performs a lane change to bypass a slow adversary vehicle and must decelerate to avoid collision with the lead vehicle.",
      "Ego vehicle performs a lane change to bypass a slow adversary vehicle and slow down to stay behind the lead vehicle.",
      "Ego vehicle performs a lane change to bypass a slow adversary vehicle and then decelerates to stay at a safe distance from a lead vehicle before returning to its original lane.",
      "Ego vehicle performs a lane change to bypass a slow adversary vehicle before returning to its original lane, and must decelerate to ensure a safe distance from the lead vehicle.",
      "Ego vehicle performs a lane change to bypass a slow adversary vehicle while avoiding a faster lead vehicle before returning to its original lane.",
      "Ego vehicle performs a lane change to bypass a slow adversary vehicle, decelerates to maintain a safe distance from the lead vehicle, then returns to its original lane.",
      "Ego vehicle performs a lane change to bypass a slow adversary vehicle, then decelerates to allow a lead vehicle to merge.",
      "Ego vehicle performs a lane change to bypass a slow adversary vehicle, then must decelerate to avoid a lead vehicle and return to its original lane.",
      "Ego vehicle performs a lane change to bypass a slow adversary vehicle, using the lead vehicle as a reference to maintain a safe distance.",
      "Ego vehicle performs a lane change to bypass a slow adversary vehicle, while also avoiding a lead vehicle.",
      "Ego vehicle performs a lane change to bypass an adversary vehicle and maintains a safe distance to the lead vehicle.",
      "Ego vehicle performs a lane change to bypass an adversary vehicle, and then decelerates to avoid a lead vehicle.",
      "Ego vehicle performs a lane change to overtake a slow adversary vehicle and bypass a fast lead vehicle.",
      "Ego vehicle performs lane change to bypass a slow adversary vehicle and decelerates if the lead vehicle is within a safe distance.",
      "Ego vehicle performs lane change to bypass a slow adversary vehicle, then decelerates and follows the lead vehicle until reaching the end of the scenario."
    ],
    "body": "param carla_map = 'Town03'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.7, 1.0)\nparam ADV_DIST = VerifaiRange(10, 15)\nparam ADV_INIT_SPEED = VerifaiRange(2, 4)\nparam ADV_END_SPEED = 2 * VerifaiRange(7, 10)\nADV_BUFFER_TIME = 5\nLEAD_DIST = globalParameters.ADV_DIST + 10\nLEAD_SPEED = globalParameters.EGO_SPEED - 4\nBYPASS_DIST = [15, 10]\nSAFE_DIST = 15\nINIT_DIST = 50\nTERM_DIST = 70\nTERM_TIME = 10\nbehavior DecelerateBehavior(brake):\n\ttake SetBrakeAction(brake)\nbehavior EgoBehavior():\n\ttry:\n\t\tdo FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n\tinterrupt when (distance to adversary) < BYPASS_DIST[0]:\n\t\tfasterLaneSec = self.laneSection.fasterLane\n\t\tdo LaneChangeBehavior(\n\t\t\t\tlaneSectionToSwitch=fasterLaneSec,\n\t\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\t\ttry:\n\t\t\tdo FollowLaneBehavior(\n\t\t\t\t\ttarget_speed=globalParameters.EGO_SPEED,\n\t\t\t\t\tlaneToFollow=fasterLaneSec.lane) \\\n\t\t\t\tuntil (distance to adversary) > BYPASS_DIST[1]\n\t\tinterrupt when (distance to lead) < SAFE_DIST:\n\t\t\ttry:\n\t\t\t\tdo DecelerateBehavior(globalParameters.EGO_BRAKE)\n\t\t\tinterrupt when (distance to lead) > SAFE_DIST:\n\t\t\t\tdo FollowLaneBehavior(target_speed=LEAD_SPEED) for TERM_TIME seconds\n\t\t\t\tterminate \nbehavior AdversaryBehavior():\n\tdo FollowLaneBehavior(target_speed=globalParameters.ADV_INIT_SPEED) \\\n\t\tuntil self.lane is not ego.lane\n\tdo FollowLaneBehavior(target_speed=globalParameters.ADV_END_SPEED)\nbehavior LeadBehavior():\n\tfasterLaneSec = self.laneSection.fasterLane\n\tdo LaneChangeBehavior(\n\t\t\tlaneSectionToSwitch=fasterLaneSec,\n\t\t\ttarget_speed=LEAD_SPEED)\n\tdo FollowLaneBehavior(target_speed=LEAD_SPEED)\ninitLane = Uniform(*network.lanes)\negoSpawnPt = OrientedPoint in initLane.centerline\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior()\nadversary = Car following roadDirection for globalParameters.ADV_DIST,\n\twith blueprint MODEL,\n\twith behavior AdversaryBehavior()\nlead = Car following roadDirection for LEAD_DIST,\n\twith blueprint MODEL,\n\twith behavior LeadBehavior()\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary to intersection) > INIT_DIST\nrequire (distance from lead to intersection) > INIT_DIST\nrequire always (adversary.laneSection._fasterLane is not None)\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "docstring": "Ego vehicle performs a lane change to bypass a slow adversary vehicle but cannot return to its original lane because the adversary accelerates. Ego vehicle must then slow down to avoid collision with leading vehicle in new lane.",
    "has_docstring": true,
    "name": "bypassing_03"
  },
  {
    "augmented_docstrings": [
      "Ego vehicle attempts to bypass a cluster of slow-moving adversary vehicles on a highway.",
      "Ego vehicle attempts to bypass three slower moving vehicles by switching lanes.",
      "Ego vehicle bypasses 3 vehicles standing in 3 different lanes.",
      "Ego vehicle bypasses three adversaries on a straight road by lane changing.",
      "Ego vehicle is driving on a highway and must perform lane-change maneuvers to bypass three slow-moving vehicles.",
      "Ego vehicle is driving on a straight road and encounters three slower moving vehicles. The ego vehicle must perform lane-change maneuvers to bypass all three vehicles.",
      "Ego vehicle is traveling straight while three adversary vehicles are driving in the same direction at different distances away from the ego vehicle. The ego vehicle must bypass the middle adversary vehicle by making a lane change.",
      "Ego vehicle maneuvers to bypass three consecutive slow-moving vehicles on a straight lane.",
      "Ego vehicle must perform lane change maneuvers to bypass 3 adversaries at different distances on the road.",
      "Ego vehicle needs to bypass a group of three other vehicles on the road.",
      "Ego vehicle needs to navigate around multiple adversaries in a lane.",
      "Ego vehicle performs lane change to bypass three slow-moving cars on a single lane.",
      "Ego-vehicle is driving straight on a lane while three adversary-vehicles are driving on the same lane in the opposite direction. The ego-vehicle must perform lane-change maneuvers in order to bypass the adversary-vehicles.",
      "Ego-vehicle is travelling on a straight road, with three slow-moving cars coming in the opposite direction. The ego-vehicle must bypass the slow-moving cars by changing lanes.",
      "Ego-vehicle must quickly bypass three adversary vehicles on a single lane.",
      "Ego-vehicle navigates a multi-lane roadway by safely bypassing three adversarial vehicles.",
      "Ego-vehicle needs to bypass three adversaries by changing lanes.",
      "Ego-vehicle needs to bypass three adversaries in a row while keeping its lane or changing to a lateral lane.",
      "Ego-vehicle needs to bypass three adversaries vehicles in succession by lane change.",
      "Ego-vehicle needs to make a lane change maneuver to bypass three cars which are driving in the same lane."
    ],
    "body": "param carla_map = 'Town03'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\nparam ADV1_DIST = VerifaiRange(20, 25)\nparam ADV2_DIST = globalParameters.ADV1_DIST + VerifaiRange(15, 20)\nparam ADV3_DIST = globalParameters.ADV2_DIST + VerifaiRange(15, 20)\nparam ADV_SPEED = VerifaiRange(2, 4)\nBYPASS_DIST = 15\nINIT_DIST = 50\nTERM_DIST = globalParameters.ADV3_DIST + 15\nbehavior EgoBehavior():\n\ttry:\n\t\tdo FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n\tinterrupt when ((distance to adversary_1) < BYPASS_DIST\n\t\t\t\t or (distance to adversary_3) < BYPASS_DIST):\n\t\tnewLaneSec = self.laneSection.laneToRight\n\t\tdo LaneChangeBehavior(\n\t\t\tlaneSectionToSwitch=newLaneSec,\n\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\tinterrupt when (distance to adversary_2) < BYPASS_DIST:\n\t\tnewLaneSec = self.laneSection.laneToLeft\n\t\tdo LaneChangeBehavior(\n\t\t\tlaneSectionToSwitch=newLaneSec,\n\t\t\ttarget_speed=globalParameters.EGO_SPEED)\nbehavior Adversary2Behavior():\n\trightLaneSec = self.laneSection.laneToRight\n\tdo LaneChangeBehavior(\n\t\tlaneSectionToSwitch=rightLaneSec,\n\t\ttarget_speed=globalParameters.ADV_SPEED)\n\tdo FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\ninitLane = Uniform(*filter(lambda lane:\n\tall([sec._laneToRight is not None for sec in lane.sections]),\n\tnetwork.lanes))\negoSpawnPt = OrientedPoint in initLane.centerline\negoLaneSecToSwitch = initLane.sectionAt(egoSpawnPt).laneToRight\nadversary_1, adversary_2, adversary_3 = Car, Car, Car\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior()\nadversary_1 = Car following roadDirection for globalParameters.ADV1_DIST,\n\twith blueprint MODEL,\n\twith behavior FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\nadversary_2 = Car following roadDirection for globalParameters.ADV2_DIST,\n\twith blueprint MODEL,\n\twith behavior Adversary2Behavior()\nadversary_3 = Car following roadDirection for globalParameters.ADV3_DIST,\n\twith blueprint MODEL,\n\twith behavior FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary_1 to intersection) > INIT_DIST\nrequire (distance from adversary_2 to intersection) > INIT_DIST\nrequire (distance from adversary_3 to intersection) > INIT_DIST\nterminate when (distance to adversary_3) > TERM_DIST",
    "docstring": "Ego vehicle performs multiple lane changes to bypass three slow adversary vehicles.",
    "has_docstring": true,
    "name": "bypassing_05"
  },
  {
    "augmented_docstrings": [
      "Debris avoidance. The ego-vehicle must dodge a series of debris on the road.",
      "Ego car must navigate around randomly placed debris on the road.",
      "Ego vehicle must avoid debris scattered on the road.",
      "Ego vehicle must avoid debris that is spread across the road.",
      "Ego vehicle must avoid multiple debris on the road while driving at a constant speed.",
      "Ego vehicle must drive around debris and avoid collisions.",
      "Ego vehicle must maneuver to avoid a series of debris on the road.",
      "Ego vehicle must maneuver to avoid debris on the road as it passes by.",
      "Ego vehicle must navigate through a debris field without being impacted by the debris.",
      "Ego vehicle must swerve to avoid debris scattered on the road.",
      "Ego-vehicle must brake and/or avoid obstacles placed on the road.",
      "The Ego vehicle must navigate around debris scattered on the road.",
      "The ego vehicle drives along a lane and attempts to avoid a set of debris spread along the road.",
      "The ego-vehicle must avoid 3 debris objects on the road.",
      "The ego-vehicle must drive around a debris-filled road and reach the end of the road without hitting any of the debris.",
      "The ego-vehicle must drive around a series of debris on the road.",
      "The ego-vehicle must navigate an obstacle course of debris scattered on the road.",
      "The ego-vehicle must navigate an obstacle field created by three pieces of debris spread out evenly on the road.",
      "The ego-vehicle must navigate through a series of debris scattered on the road and avoid colliding with them.",
      "The ego-vehicle must pass a series of debris without crashing."
    ],
    "body": "param carla_map = 'Town01'\nmodel scenic.simulators.carla.model\nEGO_MODEL = \"vehicle.lincoln.mkz_2017\"\nEGO_SPEED = 10\nbehavior EgoBehavior(speed=10):\n    do FollowLaneBehavior(speed)\nlane = Uniform(*network.lanes)\nstart = OrientedPoint on lane.centerline\nego = Car at start,\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED)\ndebris1 = Debris following roadDirection for Range(10, 20)\ndebris2 = Debris following roadDirection from debris1 for Range(5, 10)\ndebris3 = Debris following roadDirection from debris2 for Range(5, 10)\nrequire (distance to intersection) > 50\nterminate when (distance from debris3 to ego) > 10 and (distance to start) > 50",
    "docstring": "Control loss without previous action.\nThe ego-vehicle loses control due to bad conditions on the road and it must recover, coming back to its original lane.",
    "has_docstring": true,
    "name": "carlaChallenge1"
  },
  {
    "augmented_docstrings": [
      "Ego vehicle approaches an intersection with a vending machine and a pedestrian crossing the road. The ego vehicle must decelerate to a safe distance from the pedestrian when it is close.",
      "Ego vehicle follows a lane and applies the brakes when it reaches a certain distance from a pedestrian or vending machine.",
      "Ego vehicle follows lane and brakes when it reaches a certain threshold distance to a pedestrian and a vending machine.",
      "Ego vehicle follows the lane and must brake when it reaches a threshold distance to an obstacle (a pedestrian and a vending machine).",
      "Ego vehicle must brake when it reaches a threshold distance to pedestrian, who is crossing the road in front of the vehicle.",
      "Ego vehicle must slow down to a safe speed when it reaches a threshold distance from a pedestrian near a vending machine.",
      "Ego vehicle must slow down when it approaches a pedestrian and a vending machine.",
      "Ego vehicle must stop at a certain distance from a pedestrian and a vending machine.",
      "Ego vehicle must stop when it approaches a pedestrian crossing the road. An additional vending machine is also in the scene.",
      "Ego vehicle must suddenly stop to avoid collision with a pedestrian crossing the road unexpectedly, while a vending machine awaits the vehicle on the right side of the road.",
      "Ego vehicle needs to slow down in order to avoid hitting a pedestrian who is crossing the road and a vending machine on the side.",
      "Ego vehicle slows down when a pedestrian crosses the road unexpectedly and a vending machine is present.",
      "Ego-vehicle is driving on a single lane and must brake when it reaches a certain distance to a pedestrian and a vending machine.",
      "Ego-vehicle is following a lane, yielding to a pedestrian and a vending machine in its path.",
      "Ego-vehicle must stop before reaching a pedestrian crossing the road and a vending machine.",
      "Ego-vehicle must suddenly stop to avoid collision with a pedestrian who is crossing the road, and also stop for a vending machine.",
      "Ego-vehicle must yield to a pedestrian crossing the road near a vending machine.",
      "Ego-vehicle needs to approach a vending machine and stop at a certain distance while avoiding a pedestrian in the way.",
      "The ego vehicle is driving on a road and an unexpected pedestrian crossing is encountered. The ego vehicle must brake to avoid a collision.",
      "The ego vehicle must slow down when it reaches the safety distance to an obstacle, in this case a pedestrian and a vending machine, before an intersection."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nEGO_MODEL = \"vehicle.lincoln.mkz_2017\"\nEGO_SPEED = 10\nSAFETY_DISTANCE = 10\nBRAKE_INTENSITY = 1.0\nPEDESTRIAN_MIN_SPEED = 1.0\nTHRESHOLD = 20\nbehavior EgoBehavior(speed=10):\n    try:\n        do FollowLaneBehavior(target_speed=speed)\n    interrupt when withinDistanceToObjsInLane(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_INTENSITY)\nbehavior PedestrianBehavior(min_speed=1, threshold=10):\n    do CrossingBehavior(ego, min_speed, threshold)\nlane = Uniform(*network.lanes)\nspot = OrientedPoint on lane.centerline\nvending_spot = OrientedPoint following roadDirection from spot for -3\npedestrian = Pedestrian right of spot by 3,\n    with heading 90 deg relative to spot.heading,\n    with regionContainedIn None,\n    with behavior PedestrianBehavior(PEDESTRIAN_MIN_SPEED, THRESHOLD)\nvending_machine = VendingMachine right of vending_spot by 3,\n    with heading -90 deg relative to vending_spot.heading,\n    with regionContainedIn None\nego = Car following roadDirection from spot for Range(-30, -20),\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED)\nrequire (distance to intersection) > 75\nrequire (ego.laneSection._slowerLane is None)\nterminate when (distance to spot) > 50",
    "docstring": "Obstacle avoidance without prior action.\nThe ego-vehicle encounters an obstacle / unexpected entity on the road and must perform an emergency brake or an avoidance maneuver.",
    "has_docstring": true,
    "name": "carlaChallenge3_dynamic"
  },
  {
    "augmented_docstrings": [
      "Ego vehicle performs lane change to pass a slow-moving vehicle.",
      "Lane Change Maneuver.\nThe ego-vehicle must perform a lane change maneuver in order to pass the slow moving cyclist ahead.",
      "Lane Change.\nEgo vehicle changes its lane to pass a cyclist riding in the same lane, while keeping a safety distance.",
      "Lane change avoidance.\nThe ego-vehicle must perform a lane change to avoid a slower vehicle, but must do so safely.",
      "Lane change behavior.\nThe ego vehicle must safely overtake a slower cyclist by performing a lane change.",
      "Lane change maneuver with an obstacle.\nThe ego-vehicle must perform a lane change maneuver while avoiding a cyclist in the adjacent lane.",
      "Lane change scenario.\nThe ego-vehicle is traveling along a lane and must switch to the adjacent lane in order to avoid a cyclist in its current lane.",
      "Lane change with a bicycle.\nThe ego-vehicle must perform a lane change in order to avoid a bicycle traveling slower than the ego-vehicle.",
      "Lane change with an obstacle.\nThe ego-vehicle must perform a lane change maneuver while avoiding a slow-moving obstacle.",
      "Lane change with an obstacle.\nThe ego-vehicle needs to perform a lane change to the left lane, while avoiding a slow-moving cyclist.",
      "Lane change with maneuver.\nThe ego-vehicle must safely perform a lane change to pass a slow-moving cyclist.",
      "Lane change with obstacle (bicycle).\nThe ego-vehicle must perform a lane change to the left in order to avoid a slow-moving obstacle (a bicycle).",
      "Lane change with obstacle avoidance.\nThe ego-vehicle must execute an emergency lane change to avoid an obstacle and continue its path.",
      "Lane change with obstacle avoidance.\nThe ego-vehicle must perform a lane change to avoid a cyclist on the road, while at the same time maintaining a safe distance to the leading car.",
      "Lane change with obstacle avoidance. The ego-vehicle has to perform a lane change while avoiding the cyclist.",
      "Lane change with obstacle.\nThe ego-vehicle must perform a lane change maneuver when it comes within a certain distance of the cyclist.",
      "Lane change without prior action.\nThe ego-vehicle must perform a lane change to the left lane to overtake the cyclist.",
      "Lane change without prior action.\nThe ego-vehicle must perform an emergency lane change in order to avoid a collision with a cyclist.",
      "Lane change. The ego-vehicle performs a lane change in order to avoid a slow-moving bicycle.",
      "Lane-change scenario with an obstacle.\nThe ego-vehicle is driving on a straight lane and must perform a lane-change maneuver in order to pass an obstacle. The obstacle is a slow-moving cyclist who is also approaching the intersection. The ego-vehicle must complete the lane-change maneuver before reaching the threshold distance to the cyclist."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nEGO_SPEED = 10\nSLOW_CAR_SPEED = 6\nEGO_TO_BICYCLE = 10\nDIST_THRESHOLD = 15\nbehavior EgoBehavior(leftpath, origpath=[]):\n\tlaneChangeCompleted = False\n\ttry: \n\t\tdo FollowLaneBehavior(EGO_SPEED)\n\tinterrupt when withinDistanceToAnyObjs(self, DIST_THRESHOLD) and not laneChangeCompleted:\n\t\tdo LaneChangeBehavior(laneSectionToSwitch=leftpath, target_speed=10)\n\t\tlaneChangeCompleted = True\nbehavior SlowCarBehavior():\n\tdo FollowLaneBehavior(SLOW_CAR_SPEED)\nlaneSecsWithRightLane = []\nfor lane in network.lanes:\n\tfor laneSec in lane.sections:\n\t\tif laneSec._laneToRight != None:\n\t\t\tlaneSecsWithRightLane.append(laneSec)\nassert len(laneSecsWithRightLane) > 0, \\\n\t'No lane sections with adjacent left lane in network.'\ninitLaneSec = Uniform(*laneSecsWithRightLane)\nrightLane = initLaneSec._laneToRight\nspawnPt = OrientedPoint on initLaneSec.centerline\nego = Car at spawnPt,\n\twith behavior EgoBehavior(rightLane, [initLaneSec])\ncyclist = Car following roadDirection from ego for EGO_TO_BICYCLE,\n\twith behavior SlowCarBehavior()\nrequire (distance from ego to intersection) > 10\nrequire (distance from cyclist to intersection) > 10",
    "docstring": "Ego-vehicle performs a lane changing to evade a leading vehicle, which is moving too slowly.",
    "has_docstring": true,
    "name": "carlaChallenge5"
  },
  {
    "augmented_docstrings": [
      "Ego car and a crossing car have to avoid collision at a 4-way intersection. The ego car is driving straight and the crossing car is making a left turn. The crossing car has a slight delay before it starts moving.",
      "Ego vehicle and a crossing car both approach a 4-way intersection at the same time. The ego vehicle must brake in order to avoid a collision.",
      "Ego vehicle and a slow-moving car are approaching a 4-way intersection from opposite directions. Ego must adjust its speed to avoid collision with the slow-moving car.",
      "Ego vehicle approaching 4-way intersection must stop to avoid collision with crossing car.",
      "Ego vehicle drives straight ahead on a 4-way intersection, while an adversary vehicle from the opposite lane turns left across the ego's trajectory. The ego must take action to avoid a collision.",
      "Ego vehicle driving through a four-way intersection and a crossing car that comes from the left side at a certain delay. Both vehicles must follow their trajectories, but the ego vehicle must brake to avoid a collision.",
      "Ego vehicle encounters a crossing car from the opposite direction at a 4-way intersection. The ego vehicle must brake to avoid a collision.",
      "Ego vehicle has to cross a four-way intersection while a slower vehicle is crossing from the opposite direction. The ego vehicle must maintain a safe distance to avoid collision.",
      "Ego vehicle is driving on a 4-way intersection and needs to continuously adjust its speed to avoid a collision with a slow-moving crossing vehicle.",
      "Ego vehicle is following a straight lane while a crossing car is approaching from the perpendicular lane. The crossing car has a delay and the ego vehicle must brake before reaching a safety distance to avoid collision.",
      "Ego vehicle is moving on a straight lane while an adversary vehicle is crossing the intersection at a four-way intersection. The ego vehicle must brake in order to avoid collision.",
      "Ego vehicle makes a straight turn at 4-way intersection while a crossing car with a delay time of 40 seconds is present. The ego vehicle must be aware and slow down in order to avoid collision.",
      "Ego vehicle must avoid a slow-moving car crossing at a 4-way intersection.",
      "Ego vehicle must decelerate in order to avoid a collision with a crossing car.",
      "Ego vehicle must slow down and wait for a crossing car to pass before continuing on its trajectory.",
      "Ego vehicle passes a four-way intersection and must slow down to allow a crossing car to make its turn.",
      "Simulation of an ego car having to break to avoid a collision with a crossing car at a 4-way intersection.",
      "The ego vehicle is driving straight and, at an intersection, an adversary vehicle is crossing the intersection and the ego vehicle must brake.",
      "The ego vehicle must perform an emergency brake when a car from opposite lane is crossing the intersection.",
      "This Scenic program simulates an ego vehicle and a slow-moving crossing car at an intersection. The ego vehicle must brake when it is within a certain distance of the crossing car and the slow-moving car must respect the delay time."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nDELAY_TIME_1 = 1 # the delay time for ego\nDELAY_TIME_2 = 40 # the delay time for the slow car\nFOLLOWING_DISTANCE = 13 # normally 10, 40 when DELAY_TIME is 25, 50 to prevent collisions\nDISTANCE_TO_INTERSECTION1 = Uniform(15, 20) * -1\nDISTANCE_TO_INTERSECTION2 = Uniform(10, 15) * -1\nSAFETY_DISTANCE = 20\nBRAKE_INTENSITY = 1.0\nbehavior CrossingCarBehavior(trajectory):\n\twhile True:\n\t\tdo FollowTrajectoryBehavior(trajectory = trajectory)\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n\t\ttake SetBrakeAction(BRAKE_INTENSITY)\nspawnAreas = []\nfourWayIntersection = filter(lambda i: i.is4Way, network.intersections)\nintersec = Uniform(*fourWayIntersection)\nstartLane = Uniform(*intersec.incomingLanes)\nstraight_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, startLane.maneuvers)\nstraight_maneuver = Uniform(*straight_maneuvers)\nego_trajectory = [straight_maneuver.startLane, straight_maneuver.connectingLane, straight_maneuver.endLane]\nconflicting_straight_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, straight_maneuver.conflictingManeuvers)\ncsm = Uniform(*conflicting_straight_maneuvers)\ncrossing_startLane = csm.startLane\ncrossing_car_trajectory = [csm.startLane, csm.connectingLane, csm.endLane]\nego_spwPt = startLane.centerline[-1]\ncsm_spwPt = crossing_startLane.centerline[-1]\nego = Car following roadDirection from ego_spwPt for DISTANCE_TO_INTERSECTION1,\n\t\twith behavior EgoBehavior(trajectory = ego_trajectory)\ncrossing_car = Car following roadDirection from csm_spwPt for DISTANCE_TO_INTERSECTION2,\n\t\t\t\twith behavior CrossingCarBehavior(crossing_car_trajectory)\n\"\"\"Note: Traffic light is currently not controlled but this functionality will be added very soon \"\"\"",
    "docstring": "Ego-vehicle is going straight at an intersection but a crossing vehicle runs a red light, forcing the ego-vehicle to perform a collision avoidance maneuver.",
    "has_docstring": true,
    "name": "carlaChallenge7"
  },
  {
    "augmented_docstrings": [
      "A crossing car turns left from a 4-way intersection, while an ego car turns right from the same intersection. The ego car must brake to avoid collision with the crossing car.",
      "Crossing car drives straight while ego vehicle makes a right turn. Ego vehicle must brake to avoid collision.",
      "Ego car must react to a slow-moving vehicle crossing an intersection.",
      "Ego vehicle has to brake to avoid collision with a crossing car when turning right at an intersection.",
      "Ego vehicle must brake to avoid collision when a crossing car approaches the four-way intersection.",
      "Ego vehicle must brake to avoid collision with a slow crossing car that is turning right across its path.",
      "Ego vehicle must brake to avoid collision with crossing car at an intersection.",
      "Ego vehicle must follow the trajectory of a right turn while a car crossing the intersection must safely go straight.",
      "Ego vehicle must react and brake when a slow crossing car turns at the intersection.",
      "Ego vehicle must react in time to slow down to avoid collision when crossing car unexpectedly turns right in front of it.",
      "Ego vehicle must stop to wait for a crossing car that is turning right in front of it.",
      "Ego vehicle must suddenly stop to avoid collision when a car makes a right turn in front of it.",
      "Ego vehicle must yield to a slow crossing vehicle at an intersection.",
      "Ego vehicle performs a right turn at an intersection while another car is crossing the intersection. Ego must brake in order to avoid collision with the crossing car.",
      "Ego vehicle reacts to a crossing car by braking to maintain a safe distance.",
      "The ego vehicle has to perform a right turn at an intersection, while a slow car crosses the intersection. The ego vehicle must slow down in order to maintain a safe distance.",
      "The ego vehicle has to perform a right turn maneuver and brake to avoid collision with a crossing car.",
      "The ego vehicle must brake to avoid crashing into a car that is crossing an intersection.",
      "The ego vehicle must perform a right turn to avoid colliding with a crossing car that is going straight.",
      "The ego vehicle must yield to the crossing car and slow down to avoid a potential collision."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nDELAY_TIME_1 = 1 # the delay time for ego\nDELAY_TIME_2 = 40 # the delay time for the slow car\nFOLLOWING_DISTANCE = 13 # normally 10, 40 when DELAY_TIME is 25, 50 to prevent collisions\nDISTANCE_TO_INTERSECTION1 = Uniform(10, 15) * -1\nDISTANCE_TO_INTERSECTION2 = Uniform(15, 20) * -1\nSAFETY_DISTANCE = 20\nBRAKE_INTENSITY = 1.0\nbehavior CrossingCarBehavior(trajectory):\n\tdo FollowTrajectoryBehavior(trajectory = trajectory)\n\tterminate\nbehavior EgoBehavior(trajectory):\n\ttry :\n\t\tdo FollowTrajectoryBehavior(trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n\t\ttake SetBrakeAction(BRAKE_INTENSITY)\nspawnAreas = []\nfourWayIntersection = filter(lambda i: i.is4Way, network.intersections)\nintersec = Uniform(*fourWayIntersection)\nstartLane = Uniform(*intersec.incomingLanes)\nstraight_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, startLane.maneuvers)\nstraight_maneuver = Uniform(*straight_maneuvers)\nstraight_trajectory = [straight_maneuver.startLane, straight_maneuver.connectingLane, straight_maneuver.endLane]\nconflicting_rightTurn_maneuvers = filter(lambda i: i.type == ManeuverType.RIGHT_TURN, straight_maneuver.conflictingManeuvers)\nego_rightTurn_maneuver = Uniform(*conflicting_rightTurn_maneuvers)\nego_startLane = ego_rightTurn_maneuver.startLane\nego_trajectory = [ego_rightTurn_maneuver.startLane, ego_rightTurn_maneuver.connectingLane, \\\n\t\t\t\t\t\t\t\tego_rightTurn_maneuver.endLane]\nspwPt = startLane.centerline[-1]\ncsm_spwPt = ego_startLane.centerline[-1]\ncrossing_car = Car following roadDirection from spwPt for DISTANCE_TO_INTERSECTION1,\n\t\t\t\twith behavior CrossingCarBehavior(trajectory = straight_trajectory)\nego = Car following roadDirection from csm_spwPt for DISTANCE_TO_INTERSECTION2,\n\t\t\t\twith behavior EgoBehavior(ego_trajectory)",
    "docstring": "Ego-vehicle is performing a right turn at an intersection, yielding to crossing traffic.",
    "has_docstring": true,
    "name": "carlaChallenge9"
  },
  {
    "augmented_docstrings": [
      "Ego and adversary vehicles need to complete a four-way intersection crossing with a safe distance between them. Ego vehicle must slow down to avoid collision if the adversary does not.",
      "Ego vehicle and adversary vehicle both approach a four-way intersection, but the ego vehicle must slow down to avoid collision with the adversary.",
      "Ego vehicle and adversary vehicle both enter an intersection and must slow down to avoid collision.",
      "Ego vehicle and adversary vehicle must both reach the intersection at the same time and the ego vehicle must be able to avoid a collision with the adversary vehicle.",
      "Ego vehicle encounters an adversary vehicle at an intersection and must brake in order to avoid collision.",
      "Ego vehicle must adjust its speed to safely pass through an intersection with an adversary vehicle.",
      "Ego vehicle must avoid collision with adversary vehicle when both vehicles attempt to turn at the same 4-way intersection.",
      "Ego vehicle must avoid collision with an adversary vehicle at an intersection by braking and slowing down.",
      "Ego vehicle must drive safely and obey the traffic rules while navigating through a 4-way intersection while an adversary vehicle makes a left turn.",
      "Ego vehicle must overtake an adversary vehicle while both are making turns at an intersection. Ego vehicle must decelerate in order to maintain a safe distance while the adversary takes its turn.",
      "Ego vehicle must slow down in order to avoid collision with adversary vehicle while both vehicles navigate an intersection.",
      "Ego vehicle must slow down to avoid a collision with an adversary vehicle at an intersection.",
      "Ego vehicle must slow down to avoid collision with an adversary vehicle at an intersection.",
      "Ego vehicle must slow down to avoid collision with an adversary vehicle that is making a left turn across ego vehicle's path.",
      "Ego vehicle must slow down to avoid collision with an adversary vehicle that is making a left turn at an intersection.",
      "Ego vehicle must slow down to avoid collision with an adversary vehicle when approaching an intersection.",
      "Ego vehicle must slow down when approaching an intersection to avoid collision with an adversary vehicle that is about to turn left.",
      "Ego vehicle must suddenly stop to avoid collision with adversary vehicle while driving through an intersection.",
      "Ego vehicle needs to slow down to avoid collision with an adversary vehicle making a left turn at an intersection.",
      "The two vehicles must navigate a four-way intersection, with the ego vehicle in the straight-through lane and the adversary vehicle in the left-turn lane. The ego vehicle must slow down and brake when approaching the intersection to avoid a collision with the adversary vehicle."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\nADV_INIT_DIST = [15, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\nadvInitLane = Uniform(*filter(lambda m:\n\t\tm.type is ManeuverType.STRAIGHT,\n\t\tegoManeuver.reverseManeuvers)\n\t).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "docstring": "Ego vehicle goes straight at 4-way intersection and must suddenly stop to avoid collision when adversary vehicle from opposite lane makes a left turn.",
    "has_docstring": true,
    "name": "intersection_01"
  },
  {
    "augmented_docstrings": [
      "Ego vehicle and adversary car are both turning straight at a 4-way intersection, with the ego vehicle in front.",
      "Ego vehicle and adversary vehicle both make a straight line at an intersection.",
      "Ego vehicle and adversary vehicle from opposite lane both make a straight move at an intersection.",
      "Ego vehicle and adversary vehicle from opposite lane both make a straight turn at a 4-way intersection.",
      "Ego vehicle and adversary vehicle make a straight turn at a 4-way intersection.",
      "Ego vehicle makes a left turn at 4-way intersection while adversary vehicle from opposite lane travels straight.",
      "Ego vehicle makes a straight line at a 4-way intersection while adversary from opposite lane makes a straight line.",
      "Ego vehicle makes a straight or a left turn at 4-way intersection while adversary vehicle from opposite lane makes a straight turn.",
      "Ego vehicle makes a straight or left turn at 4-way intersection while adversary vehicle from opposite lane also makes a straight turn.",
      "Ego vehicle makes a straight or left turn at 4-way intersection while adversary vehicle from opposite lane makes a straight turn.",
      "Ego vehicle makes a straight or left turn at a 4-way intersection while adversary vehicle from opposite lane goes straight.",
      "Ego vehicle makes a straight path at a 4-way intersection while the adversary vehicle from the opposite lane takes a straight path as well.",
      "Ego vehicle makes a straight turn at 4-way intersection while adversary vehicle from opposite lane makes a straight turn.",
      "Ego vehicle makes a straight turn at 4-way intersection while the adversary vehicle from opposite lane makes a straight turn.",
      "Ego vehicle makes a straight turn at a 4-way intersection while adversary vehicle from opposite lane makes a straight turn.",
      "Ego vehicle makes a straight turn at a 4-way intersection while the adversary vehicle make a straight turn from the opposite lane.",
      "Ego vehicle turns left at a 4-way intersection while an adversary vehicle straight ahead."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\nADV_INIT_DIST = [15, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m:\n\t\tm.type in (ManeuverType.STRAIGHT, ManeuverType.LEFT_TURN),\n\t\tegoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\nadvInitLane = Uniform(*filter(lambda m:\n\t\tm.type is ManeuverType.STRAIGHT,\n\t\tUniform(*filter(lambda m: \n\t\t\tm.type is ManeuverType.STRAIGHT, \n\t\t\tegoInitLane.maneuvers)\n\t\t).conflictingManeuvers)\n\t).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "docstring": "Ego vehicle either goes straight or makes a left turn at 4-way intersection and must suddenly stop to avoid collision when adversary vehicle from lateral lane continues straight.",
    "has_docstring": true,
    "name": "intersection_03"
  },
  {
    "augmented_docstrings": [
      "Ego vehicle and adversary vehicle turn at the same intersection, and the ego vehicle brakes in order to avoid a collision.",
      "Ego vehicle follows a trajectory through an intersection while avoiding an adversary car on a different trajectory.",
      "Ego vehicle follows a trajectory to take a right turn at an intersection while avoiding a left-turning adversary.",
      "Ego vehicle follows a trajectory to the right while an adversary vehicle follows a trajectory to the left to make a left turn at an intersection. Ego vehicle brakes to maintain safety distance from the adversary.",
      "Ego vehicle maneuvers around a left-turning adversary vehicle.",
      "Ego vehicle navigates a right-turn maneuver while avoiding an adversary vehicle that is navigating a left-turn maneuver.",
      "Ego vehicle performs a right turn at an intersection while an adversary vehicle performs a left turn. The speed of the vehicles is adjusted at times to ensure safety.",
      "Ego vehicle performs a right turn maneuver while avoiding a left-turning adversary vehicle.",
      "Ego vehicle performs a right turn maneuver while avoiding an adversary vehicle which is performing a left turn maneuver.",
      "Ego vehicle performs a right-turn maneuver while avoiding a left-turning adversary vehicle.",
      "Ego vehicle turns right at a four-way intersection while an adversary vehicle turns left. Ego vehicle must brake to maintain a safe distance from the adversary.",
      "Ego vehicle turns right at an intersection, while an adversary vehicle turns left. Ego vehicle must maintain a safe distance from the adversary vehicle.",
      "Ego-vehicle follows a trajectory to enter a four-way intersection, while an adversary vehicle is approaching from the opposite direction. The ego-vehicle brakes if the adversary vehicle gets too close.",
      "Ego-vehicle performs a right turn while an adversary vehicle performs a left turn at an intersection, while both vehicles attempt to avoid collisions.",
      "Ego-vehicle performs a right turn while an adversary vehicle performs a left turn at an intersection. The ego-vehicle must brake to maintain a safe distance from the adversary.",
      "Ego-vehicle performs a right-turn maneuver and evades an adversary vehicle that is performing a left-turn maneuver.",
      "Ego-vehicle performs a right-turn maneuver, while avoiding an adversary vehicle which is making a left-turn maneuver.",
      "Ego-vehicle turns right at an intersection, attempting to evade an adversary-vehicle that is turning left.",
      "The ego-vehicle follows a trajectory to make a right turn at an intersection, while an adversary vehicle follows a trajectory to make a left turn. The ego-vehicle needs to avoid a collision while taking the right turn."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\nADV_INIT_DIST = [5, 15]\nparam ADV_SPEED = VerifaiRange(7, 10)\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.RIGHT_TURN, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\nadvInitLane = Uniform(*filter(lambda m:\n\t\tm.type is ManeuverType.STRAIGHT,\n\t\tUniform(*filter(lambda m: \n\t\t\tm.type is ManeuverType.STRAIGHT, \n\t\t\tegoInitLane.maneuvers)\n\t\t).reverseManeuvers)\n\t).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "docstring": "Ego vehicle makes a right turn at 4-way intersection while adversary vehicle from opposite lane makes a left turn.",
    "has_docstring": true,
    "name": "intersection_05"
  },
  {
    "augmented_docstrings": [
      "Ego vehicle is making a left turn at a 3-way intersection, while adversary car is going straight.",
      "Ego vehicle makes a left turn at 3-way intersection while adversary vehicle from opposite lane goes straight.",
      "Ego vehicle makes a left turn at 3-way intersection while adversary vehicle from opposite lane going straight.",
      "Ego vehicle makes a left turn at 3-way intersection while adversary vehicle goes straight.",
      "Ego vehicle makes a left turn at a 3-way intersection while adversary vehicle from opposite lane goes straight.",
      "Ego-vehicle is making a left turn at a 3-way intersection while an adversary vehicle from the opposite lane is going straight."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nEGO_INIT_DIST = [20, 40]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\nADV_INIT_DIST = [0, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\nintersection = Uniform(*filter(lambda i: i.is3Way, network.intersections))\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoManeuver.conflictingManeuvers))\nadvInitLane = advManeuver.startLane\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "docstring": "Ego vehicle makes a left turn at 3-way intersection and must suddenly stop to avoid collision when adversary vehicle from lateral lane continues straight.",
    "has_docstring": true,
    "name": "intersection_07"
  },
  {
    "augmented_docstrings": [
      "Adversary and ego vehicles must navigate a 3-way intersection without colliding.",
      "Both ego and adversary vehicles must navigate a 3-way intersection.",
      "Both ego and adversary vehicles must navigate a three-way intersection without causing a collision.",
      "Ego and adversary vehicles must both turn right at an intersection.",
      "Ego-vehicle and an adversary vehicle must negotiate a 3-way intersection without colliding.",
      "Ego-vehicle and the adversary must avoid collision at an intersection.",
      "Ego-vehicle and the adversary vehicle must keep a safe distance while navigating a 3-way intersection.",
      "Ego-vehicle and the adversary vehicle must turn right at an intersection while avoiding each other.",
      "Ego-vehicle and the adversary vehicle must turn right while avoiding collision.",
      "Ego-vehicle must avoid a collision with an adversary vehicle while making a right turn at an intersection.",
      "In this scenario, the ego-vehicle and an adversary follow different trajectories towards an intersection. The goal is to have both vehicles arrive to the intersection without crashing into each other.",
      "The ego and adversary vehicles must each turn onto their respective trajectories at an intersection without colliding.",
      "The ego vehicle must make a right turn in an intersection while the adversary vehicle goes straight in the same intersection.",
      "The ego-vehicle and the adversary are each taking a different route through a three-way intersection. The ego-vehicle will turn right while the adversary will go straight. Both must use their lane following behavior and react to any obstacles in their paths.",
      "The ego-vehicle and the adversary-vehicle must navigate a three-way intersection without crashing into each other.",
      "The ego-vehicle and the adversary-vehicle negotiate a three-way intersection.",
      "The ego-vehicle must take a right turn at a 3-way intersection while the adversary must take a straight path, avoiding collision.",
      "The ego-vehicle must take a right turn at an intersection while the adversary vehicle must stay on the straight path without any collisions.",
      "Two vehicles must navigate an intersection without crashing into each other.",
      "Two vehicles must take a turn at an intersection, while maintaining a minimum safety distance from one another."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\nADV_INIT_DIST = [10, 15]\nparam ADV_SPEED = VerifaiRange(7, 10)\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\nintersection = Uniform(*filter(lambda i: i.is3Way, network.intersections))\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.RIGHT_TURN, intersection.maneuvers))\negoInitLane = egoManeuver.startLane\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoManeuver.conflictingManeuvers))\nadvInitLane = advManeuver.startLane\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "docstring": "Ego vehicle makes a right turn at 3-way intersection while adversary vehicle from lateral lane goes straight.",
    "has_docstring": true,
    "name": "intersection_09"
  },
  {
    "augmented_docstrings": [
      "A lead car is driving down a lane, and an ego car is driving down the same lane a certain distance behind. The lead car brakes suddenly, and the ego car must avoid colliding with it by braking as well.",
      "An ego car follows a lead car at a constant speed and brakes when it is within a certain distance of the lead car.",
      "An ego car follows a lead car that brakes at a certain point. The ego car must brak in order to avoid a collision.",
      "Ego vehicle follows a lead car and brakes when the lead car brakes.",
      "Ego vehicle follows a lead car at a constant distance until the lead car brakes suddenly. The ego vehicle must then engage its collision avoidance behavior to prevent a crash.",
      "Ego vehicle follows a lead car, and must brake in order to avoid collision when the lead car brakes suddenly.",
      "Ego vehicle follows a lead vehicle and must brake to avoid a collision when the lead vehicle brakes.",
      "Ego vehicle follows a lead vehicle. When the lead vehicle brakes, the ego vehicle must apply the brakes to avoid a collision.",
      "Ego vehicle follows another vehicle on the same lane and brakes to avoid a collision when the lead vehicle brakes suddenly.",
      "Ego vehicle follows the lead car on a lane until the lead car brakes suddenly, at which point ego brakes to avoid a collision.",
      "Ego vehicle must avoid a collision with the lead car by braking when the lead car brakes suddenly.",
      "Scenario to test collision avoidance behavior with a lead car that brakes suddenly. The ego vehicle is initialized at a distance behind the lead car and will break if the distance between them is less than the safety distance.",
      "The ego car follows a lead car on a road, and must react to a sudden break by the lead car by braking itself.",
      "The ego car follows a lead car that brakes suddenly at a certain point. The ego car needs to brake to avoid a collision.",
      "The two cars are initialized in such a way that they are a certain distance apart, and the lead car brakes suddenly, forcing the ego car to use its collision avoidance behavior.",
      "This Scenic program models a scenario of two cars driving on a road in which the first car brakes suddenly, and the second car must react by applying its brakes to avoid a collision.",
      "Two cars are driving on a road, with the lead car braking suddenly in the middle of the road. The trailing car must use its collision avoidance behavior to avoid crashing into the lead car.",
      "Two cars driving on the same lane, with the lead car suddenly braking. The following car must then brake to avoid a collision.",
      "Two vehicles drive on the same lane and the lead vehicle brakes suddenly. The ego vehicle must avoid a collision by braking.",
      "Two vehicles driving down a lane. The lead car brakes suddenly, and the following car must take evasive action to avoid a collision."
    ],
    "body": "param carla_map = 'Town01'\nmodel scenic.simulators.carla.model\nMAX_BREAK_THRESHOLD = 1\nSAFETY_DISTANCE = 10\nINITIAL_DISTANCE_APART = -1 * Uniform(5, 10)\nSTEPS_PER_SEC = 10\nbehavior LeadCarBehavior():\n\ttry:\n\t\tdo FollowLaneBehavior()\n\tinterrupt when 5 * STEPS_PER_SEC < simulation().currentTime and simulation().currentTime < 6 * STEPS_PER_SEC:\n\t\ttake SetBrakeAction(MAX_BREAK_THRESHOLD)\nbehavior CollisionAvoidance():\n\twhile withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n\t\ttake SetBrakeAction(MAX_BREAK_THRESHOLD)\nbehavior FollowLeadCarBehavior():\n\ttry: \n\t\tdo FollowLaneBehavior()\n\tinterrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n\t\tdo CollisionAvoidance()\nroads = network.roads\nselect_road = Uniform(*roads)\nselect_lane = Uniform(*select_road.lanes)\nother = Car on select_lane.centerline,\n\t\twith behavior LeadCarBehavior()\nego = Car following roadDirection from other for INITIAL_DISTANCE_APART,\n\t\twith behavior FollowLeadCarBehavior()",
    "docstring": "The lead car suddenly stops and then resumes moving forward",
    "has_docstring": true,
    "name": "oas_scenario_05"
  },
  {
    "augmented_docstrings": [
      "Ego and adversary vehicles both travel on the same road while a pedestrian tries to cross the road. Ego and adversary must stop to avoid collision with the pedestrian.",
      "Ego vehicle and a crossing pedestrian must both avoid an incoming vehicle.",
      "Ego vehicle and adversary vehicle must both brake to avoid collision with a pedestrian crossing the street.",
      "Ego vehicle and adversary vehicle with pedestrian crossing the street between them. Ego and adversary vehicles must brake to avoid collision with the pedestrian.",
      "Ego vehicle and an adversary vehicle must both avoid a pedestrian crossing the road at the same time.",
      "Ego vehicle and an adversary vehicle must brake to avoid collision when a pedestrian unexpectedly crosses the road.",
      "Ego vehicle encounters a pedestrian crossing the street at an intersection and must perform an emergency brake or an avoidance maneuver to avoid collision. The adversary vehicle must also brake to avoid colliding with the ego-vehicle.",
      "Ego vehicle is driving on a road with a pedestrian crossing and a slower car in the adjacent lane. The ego vehicle must brake to avoid collision with the pedestrian and the adjacent car.",
      "Ego vehicle is driving on a straight road when a pedestrian crossing from the left is detected. The ego vehicle has to brake to avoid a collision with the pedestrian, while the vehicle following from behind has to brake to avoid a collision with the ego vehicle.",
      "Ego vehicle must brake to avoid collision with crossing pedestrian while an adversary vehicle is driving nearby.",
      "Ego vehicle must stop to avoid a pedestrian crossing the road, while an adversary vehicle is approaching from an adjacent lane.",
      "Ego-vehicle and Adversary are driving in the same lane and an obstruction appears, forcing the vehicles to brake to avoid a collision.",
      "Ego-vehicle and adversary vehicle must both brake quickly to avoid a pedestrian crossing the road.",
      "Ego-vehicle and and an adversary vehicle encounter a pedestrian crossing the street, forcing them to brake in order to avoid a collision.",
      "Ego-vehicle is going straight and must brake hard to avoid collision with crossing pedestrian, while another car from another lane must also brake to avoid collision with ego-vehicle.",
      "Ego-vehicle is going straight while an adversary-vehicle is driving in the opposite direction, with a pedestrian crossing the road in between the two. The ego-vehicle must brake to avoid a crash with the pedestrian.",
      "Pedestrian crossing a road between 2 cars. The cars must brake to avoid a collision.",
      "Pedestrian crossing scenario featuring two vehicles with normal and emergency braking.",
      "Pedestrian crossing the street in front of the ego-vehicle, forcing the ego-vehicle and the adversary vehicle to brake in order to avoid a collision.",
      "The Ego vehicle is driving on a single-lane road and must suddenly stop to avoid a pedestrian crossing the road. The adversary vehicle is also driving on the same lane and must also take action to avoid a collision."
    ],
    "body": "param carla_map = 'Town01'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nparam EGO_INIT_DIST = VerifaiRange(-30, -20)\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\nparam ADV_INIT_DIST = VerifaiRange(40, 50)\nparam ADV_SPEED = VerifaiRange(7, 10)\nADV_BRAKE = 1.0\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\nparam SAFETY_DIST = VerifaiRange(10, 15)\nBUFFER_DIST = 75\nCRASH_DIST = 5\nTERM_DIST = 50\nbehavior EgoBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n    interrupt when withinDistanceToObjsInLane(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion):\n        take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\nbehavior AdvBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n    interrupt when (withinDistanceToObjsInLane(self, globalParameters.SAFETY_DIST) or (distance from adv to ped) < 10) and (ped in network.drivableRegion):\n        take SetBrakeAction(ADV_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\nroad = Uniform(*filter(lambda r: len(r.forwardLanes.lanes) == len(r.backwardLanes.lanes) == 1, network.roads))\negoLane = Uniform(road.forwardLanes.lanes)[0]\nspawnPt = OrientedPoint on egoLane.centerline\nadvSpawnPt = OrientedPoint following roadDirection from spawnPt for globalParameters.ADV_INIT_DIST\nego = Car following roadDirection from spawnPt for globalParameters.EGO_INIT_DIST,\n    with blueprint MODEL,\n    with behavior EgoBehavior()\nped = Pedestrian right of spawnPt by 3,\n    with heading 90 deg relative to spawnPt.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\nadv = Car left of advSpawnPt by 3,\n    with blueprint MODEL,\n    with heading 180 deg relative to spawnPt.heading,\n    with behavior AdvBehavior()\nrequire (distance from spawnPt to intersection) > BUFFER_DIST\nrequire always (ego.laneSection._slowerLane is None)\nrequire always (ego.laneSection._fasterLane is None)\nrequire always (adv.laneSection._slowerLane is None)\nrequire always (adv.laneSection._fasterLane is None)\nterminate when (distance to spawnPt) > TERM_DIST",
    "docstring": "Both ego and adversary vehicles must suddenly stop to avoid collision when pedestrian crosses the road unexpectedly.",
    "has_docstring": true,
    "name": "pedestrian_02"
  },
  {
    "augmented_docstrings": [
      "Ego vehicle approaches 4-way intersection and must slow down to avoid collision with a pedestrian crossing the street.",
      "Ego vehicle approaches a 4-way intersection, but must brake in order to avoid a pedestrian crossing in front of it.",
      "Ego vehicle approaches an intersection and must slow down to avoid crashing into a pedestrian crossing the street.",
      "Ego vehicle is making a right turn at an intersection and must suddenly slow down to avoid colliding with a pedestrian crossing the road.",
      "Ego vehicle makes a right turn at a 4-way intersection, and must slow down and wait for a pedestrian to cross before proceeding.",
      "Ego vehicle makes a right turn at an intersection and must come to a stop in order to avoid a pedestrian crossing the street.",
      "Ego vehicle must brake to avoid collision with a pedestrian crossing the street while making a right turn at an intersection.",
      "Ego vehicle must cautiously navigate a 4-way intersection with a pedestrian crossing the road.",
      "Ego vehicle must come to a stop when a pedestrian is crossing the road in front of it.",
      "Ego vehicle must make a right turn at an intersection, while a pedestrian is crossing in front of it. The ego vehicle must slow down to avoid a collision with the pedestrian.",
      "Ego vehicle must make a right turn at intersection, while braking to avoid hitting a pedestrian.",
      "Ego vehicle must safely pass a pedestrian crossing a road at an intersection.",
      "Ego vehicle must slow down and wait for a pedestrian to cross the street safely before making a right turn at an intersection.",
      "Ego vehicle must slow down to avoid a pedestrian crossing the road at a 4-way intersection.",
      "Ego vehicle stops abruptly to avoid collision with a pedestrian crossing the street.",
      "Ego vehicle turns right at 3-way or 4-way intersection and must apply brakes to avoid collision with a pedestrian crossing from the right.",
      "Ego vehicle turns right at 4-way intersection and must slow down in order to avoid collision with a pedestrian crossing the road.",
      "Ego vehicle turns right at 4-way intersection and must suddenly stop for a pedestrian crossing the street.",
      "Ego vehicle turns right at a 4-way intersection and must suddenly slow down to avoid collision with a pedestrian crossing the street.",
      "Ego vehicle turns right at an intersection and must brake when a pedestrian crossing the road is detected."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\nparam SAFETY_DIST = VerifaiRange(10, 15)\nCRASH_DIST = 5\nTERM_DIST = 50\nbehavior EgoBehavior(trajectory):\n    flag = True\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion) and flag:\n        flag = False\n        while withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST + 3):\n            take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\nintersection = Uniform(*filter(lambda i: i.is4Way or i.is3Way, network.intersections))\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.RIGHT_TURN, intersection.maneuvers))\negoInitLane = egoManeuver.startLane\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\ntempSpawnPt = egoInitLane.centerline[-1]\nego = Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\nped = Pedestrian right of tempSpawnPt by 5,\n    with heading ego.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "docstring": "Ego vehicle makes a right turn at an intersection and must yield when pedestrian crosses the crosswalk.",
    "has_docstring": true,
    "name": "pedestrian_04"
  }
]
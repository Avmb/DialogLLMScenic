[
  {
    "augmented_docstrings": [
      "Adversary vehicle passing an ego vehicle in the same lane. \nThe ego-vehicle is driving along a lane while the adversary vehicle is driving behind the ego-vehicle. The adversary vehicle then performs a lane change to the faster lane and passes the ego-vehicle.",
      "Adversary vehicle tries to bypass the ego vehicle on a two-lane highway.",
      "Bypass maneuver.\nThe ego-vehicle is driving in the same lane as the adversary-vehicle, which is traveling slower. The adversary-vehicle must perform a bypass maneuver to switch to the faster lane and pass the ego-vehicle.",
      "Ego vehicle and adversary vehicle both travelling in the same lane, in opposite directions. The adversary vehicle must bypass the ego vehicle by changing to a faster lane, and then switching back to the slower lane.",
      "Ego vehicle and oncoming vehicle both travel on the same lane, but the oncoming vehicle must bypass the ego vehicle by lane change.",
      "Ego vehicle drives on a straight line and the adversary vehicle overtakes it by changing lanes.",
      "Ego vehicle follows a lane and must avoid a bypassing adversary vehicle.",
      "Ego vehicle follows a lane and must avoid collision when the adversary vehicle changes lane to bypass an obstacle.",
      "Ego vehicle follows a lane while an adversary vehicle from behind performs a lane change to bypass the ego.",
      "Ego vehicle follows a lane while an adversary vehicle from the opposite direction attempts to bypass the ego vehicle by changing lanes.",
      "Ego vehicle follows a lane while the adversary passes it on the faster lane.",
      "Ego vehicle going straight and an adversary vehicle on a parallel lane making a lane change to bypass an obstacle.",
      "Ego vehicle is driving in a straight lane and must avoid a bypassing vehicle.\nThe ego-vehicle is driving in a straight lane when it is approached by an adversary vehicle from behind. The adversary vehicle then performs a lane change to bypass the ego-vehicle, before returning to its original lane. The ego-vehicle must avoid the adversary when it is performing the lane change.",
      "Ego vehicle must avoid collision with an oncoming adversary vehicle by changing lanes.",
      "Ego vehicle must avoid collision with oncoming adversary vehicle by passing it on the right side of the road.",
      "Ego vehicle must overtake an adversary vehicle in the same lane.",
      "Ego vehicle traveling on a straight road must slow down and allow adversary vehicle to bypass on a faster lane.",
      "The ego vehicle is driving along a lane and must avoid collision with an oncoming vehicle when it suddenly changes lanes to bypass an obstacle.",
      "The ego vehicle is driving on a highway and must safely bypass an adversary vehicle that is trying to change lanes.",
      "The ego vehicle is driving on a highway lane, and must avoid a passing adversary vehicle."
    ],
    "body": "param carla_map = 'Town03'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nparam EGO_SPEED = VerifaiRange(2, 4)\nparam ADV_DIST = VerifaiRange(-25, -10)\nparam ADV_SPEED = VerifaiRange(7, 10)\nBYPASS_DIST = [15, 10]\nINIT_DIST = 50\nTERM_TIME = 5\nbehavior AdversaryBehavior():\n\ttry:\n\t\tdo FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\tinterrupt when withinDistanceToAnyObjs(self, BYPASS_DIST[0]):\n\t\tfasterLaneSec = self.laneSection.fasterLane\n\t\tdo LaneChangeBehavior(\n\t\t\t\tlaneSectionToSwitch=fasterLaneSec,\n\t\t\t\ttarget_speed=globalParameters.ADV_SPEED)\n\t\tdo FollowLaneBehavior(\n\t\t\t\ttarget_speed=globalParameters.ADV_SPEED,\n\t\t\t\tlaneToFollow=fasterLaneSec.lane) \\\n\t\t\tuntil (distance to adversary) > BYPASS_DIST[1]\n\t\tslowerLaneSec = self.laneSection.slowerLane\n\t\tdo LaneChangeBehavior(\n\t\t\t\tlaneSectionToSwitch=slowerLaneSec,\n\t\t\t\ttarget_speed=globalParameters.ADV_SPEED)\n\t\tdo FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED) for TERM_TIME seconds\n\t\tterminate \ninitLane = Uniform(*network.lanes)\negoSpawnPt = OrientedPoint in initLane.centerline\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\nadversary = Car following roadDirection for globalParameters.ADV_DIST,\n\twith blueprint MODEL,\n\twith behavior AdversaryBehavior()\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary to intersection) > INIT_DIST\nrequire always (ego.laneSection._fasterLane is not None)",
    "docstring": "Adversary vehicle performs a lane change to bypass the slow ego vehicle before returning to its original lane.",
    "has_docstring": true,
    "name": "bypassing_02"
  },
  {
    "augmented_docstrings": [
      "Ego-vehicle must bypass two adversaries in two separate lane changes.",
      "Ego-vehicle must go around a blocking object using the adjacent lane, yielding to oncoming traffic.",
      "Ego-vehicle must go around two blocking objects by switching lanes into the opposite direction.",
      "Ego-vehicle must go around two blocking objects that are close to each other.",
      "Ego-vehicle must go around two blocking objects using different lanes.",
      "Ego-vehicle must go around two blocking objects using opposite lanes.",
      "Ego-vehicle must go around two blocking objects using the left and right lane, yielding to oncoming traffic.",
      "Ego-vehicle must go around two blocking objects using the opposite lane and yielding to oncoming traffic.",
      "Ego-vehicle must go around two blocking objects using the opposite lane, yielding to oncoming traffic.",
      "Ego-vehicle must go around two blocking objects using the opposite lane.",
      "Ego-vehicle must go around two blocking objects using the opposite lanes, yielding to oncoming traffic.",
      "Ego-vehicle must go around two blocking objects using the opposite lanes, yielding to one oncoming traffic.",
      "Ego-vehicle must go around two blocking vehicles using opposite lanes, yielding to oncoming traffic.",
      "Ego-vehicle must merge right and left around two blocking cars with different speeds.",
      "Ego-vehicle must yield to two oncoming cars, switching lanes twice to bypass them.",
      "Two lane change maneuvering around two blocking cars.\nThe ego-vehicle must perform two lane change maneuvers in order to bypass two cars that are blocking its path."
    ],
    "body": "param carla_map = 'Town03'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nparam EGO_SPEED = VerifaiRange(6, 8)\nparam ADV1_DIST = VerifaiRange(20, 25)\nparam ADV2_DIST = globalParameters.ADV1_DIST + VerifaiRange(15, 20)\nparam ADV_SPEED = VerifaiRange(2, 4)\nBYPASS_DIST = 15\nINIT_DIST = 50\nTERM_DIST = globalParameters.ADV2_DIST + 15\nbehavior EgoBehavior():\n\ttry:\n\t\tdo FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n\tinterrupt when (distance to adversary_1) < BYPASS_DIST:\n\t\tnewLaneSec = self.laneSection.laneToRight\n\t\tdo LaneChangeBehavior(\n\t\t\tlaneSectionToSwitch=newLaneSec,\n\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\tinterrupt when (distance to adversary_2) < BYPASS_DIST:\n\t\tnewLaneSec = self.laneSection.laneToLeft\n\t\tdo LaneChangeBehavior(\n\t\t\tlaneSectionToSwitch=newLaneSec,\n\t\t\ttarget_speed=globalParameters.EGO_SPEED)\nbehavior Adversary2Behavior():\n\trightLaneSec = self.laneSection.laneToRight\n\tdo LaneChangeBehavior(\n\t\tlaneSectionToSwitch=rightLaneSec,\n\t\ttarget_speed=globalParameters.ADV_SPEED)\n\tdo FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\ninitLane = Uniform(*filter(lambda lane:\n\tall([sec._laneToRight is not None for sec in lane.sections]),\n\tnetwork.lanes))\negoSpawnPt = OrientedPoint in initLane.centerline\negoLaneSecToSwitch = initLane.sectionAt(egoSpawnPt).laneToRight\nadversary_1, adversary_2, adversary_3 = Car, Car, Car\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior()\nadversary_1 = Car following roadDirection for globalParameters.ADV1_DIST,\n\twith blueprint MODEL,\n\twith behavior FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\nadversary_2 = Car following roadDirection for globalParameters.ADV2_DIST,\n\twith blueprint MODEL,\n\twith behavior Adversary2Behavior()\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary_1 to intersection) > INIT_DIST\nrequire (distance from adversary_2 to intersection) > INIT_DIST\nterminate when (distance to adversary_2) > TERM_DIST",
    "docstring": "Ego vehicle performs multiple lane changes to bypass two slow adversary vehicles.",
    "has_docstring": true,
    "name": "bypassing_04"
  },
  {
    "augmented_docstrings": [
      "Ego vehicle and adversary vehicle make two separate trajectories at a 4-way intersection. Ego vehicle brakes when it is too close to the adversary vehicle.",
      "Ego vehicle is approaching a 4-way intersection and needs to make a right turn while an adversary vehicle from the lateral lane goes straight.",
      "Ego vehicle is driving through a 4-way intersection and an adversary vehicle is coming from the perpendicular side. The ego vehicle must obey the speed limit, and brake when the adversary vehicle is within a safety distance of 20m.",
      "Ego vehicle makes a right turn at 4-way intersection while adversary vehicle from lateral lane goes straight.",
      "Ego vehicle makes a right turn at 4-way intersection while adversary vehicle from lateral lane goes straight. Ego brakes when the safety distance (20m) is breached.",
      "Ego vehicle makes a right turn at 4-way intersection while adversary vehicle from lateral lane goes straight. Ego vehicle brakes when safety distance is violated.",
      "Ego vehicle makes a right turn at 4-way intersection while adversary vehicle from lateral lane goes straight. Ego will brake if distance to adversary is less than 20 units.",
      "Ego vehicle makes a right turn at a 4-way intersection while adversary vehicle from lateral lane goes straight.",
      "Ego vehicle makes a right turn at a 4-way intersection while adversary vehicle from lateral lane goes straight. Ego will brake if it comes too close to adversary.",
      "Ego vehicle makes a right turn at a 4-way intersection while an adversary vehicle from a lateral lane goes straight.",
      "Ego vehicle makes a right turn at a 4-way intersection while an adversary vehicle from the lateral lane goes straight.",
      "Ego vehicle makes a right turn at a 4-way intersection while the adversary vehicle goes straight.",
      "Ego vehicle makes a right turn at a 4-way intersection while the adversary vehicle goes straight. Ego vehicle must brake if it gets too close to the adversary vehicle.",
      "Ego vehicle makes a turn at 4-way intersection while adversary vehicle from lateral lane goes straight."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nEGO_MODEL = \"vehicle.lincoln.mkz_2017\"\nEGO_SPEED = 10\nSAFETY_DISTANCE = 20\nBRAKE_INTENSITY = 1.0\nbehavior AdversaryBehavior(trajectory):\n    do FollowTrajectoryBehavior(trajectory=trajectory)\nbehavior EgoBehavior(speed, trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=speed, trajectory=trajectory)\n        do FollowLaneBehavior(target_speed=speed)\n    interrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_INTENSITY)\nfourWayIntersection = filter(lambda i: i.is4Way and not i.isSignalized, network.intersections)\nintersec = Uniform(*fourWayIntersection)\nego_start_lane = Uniform(*intersec.incomingLanes)\nego_maneuver = Uniform(*ego_start_lane.maneuvers)\nego_trajectory = [ego_maneuver.startLane, ego_maneuver.connectingLane, ego_maneuver.endLane]\nadv_maneuver = Uniform(*ego_maneuver.conflictingManeuvers)\nadv_trajectory = [adv_maneuver.startLane, adv_maneuver.connectingLane, adv_maneuver.endLane]\nadv_start_lane = adv_maneuver.startLane\nego_spawn_pt = OrientedPoint in ego_maneuver.startLane.centerline\nadv_spawn_pt = OrientedPoint in adv_maneuver.startLane.centerline\nego = Car at ego_spawn_pt,\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED, ego_trajectory)\nadversary = Car at adv_spawn_pt,\n    with behavior AdversaryBehavior(adv_trajectory)\nrequire 20 <= (distance to intersec) <= 25\nrequire 15 <= (distance from adversary to intersec) <= 20\nterminate when (distance to ego_spawn_pt) > 70",
    "docstring": "Crossing negotiation at an unsignalized intersection.\nThe ego-vehicle needs to negotiate with other vehicles to cross an unsignalized intersection. In this situation it is assumed that the first to enter the intersection has priority.",
    "has_docstring": true,
    "name": "carlaChallenge10"
  },
  {
    "augmented_docstrings": [
      "Ego vehicle attempts to overtake the leading car while an obstacle is present on the road and must then brake to avoid collision.",
      "Ego vehicle drives following the leading car, and brakes when approaching a trash bag on the road.",
      "Ego vehicle following a lead car must brake to avoid collision with an obstacle.",
      "Ego vehicle follows a lead car at a safe distance. When the lead car brakes, ego must also brake to maintain the safe distance.",
      "Ego vehicle follows a lead car, and comes to a stop when the lead car brakes for an obstacle.",
      "Ego vehicle follows a leader car, and brakes when the leader car brakes to avoid an obstacle.",
      "Ego vehicle follows a leading car and must perform an emergency brake when the leading car stops abruptly due to an obstacle on the road.",
      "Ego vehicle follows a leading car until a certain distance threshold is passed and brakes to avoid a trash can obstacle on the road.",
      "Ego vehicle follows a leading car which stops due to an obstacle on the road. The ego vehicle then brakes to avoid a collision.",
      "Ego vehicle follows the leading car at a fixed speed until it passes a threshold distance to the leading car, at which point the ego vehicle brakes.",
      "Ego vehicle follows the leading car, and brakes when passing a certain threshold distance to the leading car.",
      "Ego vehicle is following a leading car, and must brake when the leading car brakes to avoid a trash obstacle on the road.",
      "Ego vehicle is following a leading car, and must come to a full stop before hitting a trash can on the road.",
      "Ego vehicle is following a leading car. When the leading car brakes due to an obstacle, the ego vehicle must also brake to maintain a safe distance.",
      "Ego vehicle must brake to avoid collision with a leading car which has stopped to avoid collision with an obstacle.",
      "Ego vehicle must follow the leading car while maintaining a safe distance, and brake if necessary.",
      "The ego car follows the leading car and must brake when the leading car brakes to avoid a collision.",
      "The ego-vehicle follows a leading car until it brakes due to an obstacle in the road. The ego-vehicle must also brake in order to avoid a collision.",
      "The ego-vehicle follows a leading car, and brakes after passing a threshold distance to the leading car in order to avoid collisions with obstacles on the road.",
      "The ego-vehicle is following the leading car and must brake when it passes a threshold distance to the obstacle."
    ],
    "body": "param carla_map = 'Town01'\nmodel scenic.simulators.carla.model\nEGO_MODEL = \"vehicle.lincoln.mkz_2017\"\nEGO_SPEED = 10\nEGO_BRAKING_THRESHOLD = 12\nLEAD_CAR_SPEED = 10\nLEADCAR_BRAKING_THRESHOLD = 10\nBRAKE_ACTION = 1.0\nbehavior EgoBehavior(speed=10):\n    try:\n        do FollowLaneBehavior(speed)\n    interrupt when withinDistanceToAnyCars(self, EGO_BRAKING_THRESHOLD):\n        take SetBrakeAction(BRAKE_ACTION)\nbehavior LeadingCarBehavior(speed=10):\n    try: \n        do FollowLaneBehavior(speed)\n    interrupt when withinDistanceToAnyObjs(self, LEADCAR_BRAKING_THRESHOLD):\n        take SetBrakeAction(BRAKE_ACTION)\nlane = Uniform(*network.lanes)\nobstacle = Trash on lane.centerline\nleadCar = Car following roadDirection from obstacle for Range(-50, -30),\n        with behavior LeadingCarBehavior(LEAD_CAR_SPEED)\nego = Car following roadDirection from leadCar for Range(-15, -10),\n        with blueprint EGO_MODEL,\n        with behavior EgoBehavior(EGO_SPEED)\nrequire (distance to intersection) > 80\nterminate when ego.speed < 0.1 and (distance to obstacle) < 30",
    "docstring": "Longitudinal control after leading vehicle\u2019s brake.\nThe leading vehicle decelerates suddenly due to an obstacle and the ego-vehicle must perform an emergency brake or an avoidance maneuver.",
    "has_docstring": true,
    "name": "carlaChallenge2"
  },
  {
    "augmented_docstrings": [
      "At a 4-way intersection, Ego vehicle goes straight while an oncoming bicycle must yield. Ego vehicle must brake to ensure safety.",
      "Ego Vehicle goes straight at an intersection and must brake when a bicycle crosses the road.",
      "Ego vehicle goes straight at a 4-way intersection and must yield when a bicycle on the intersecting lane crosses the intersection.",
      "Ego vehicle goes straight at an intersection and must stop when a bicycle passes in front of it.",
      "Ego vehicle goes straight at an intersection and must suddenly brake when a bicycle crosses the road in front of it.",
      "Ego vehicle goes straight at an intersection and must suddenly stop to avoid a bicycle crossing the road.",
      "Ego vehicle goes straight at an intersection and must suddenly stop to avoid collision when a bicycle crosses the road.",
      "Ego vehicle goes straight at an intersection and must suddenly stop to avoid collision with a bicycle crossing the intersection.",
      "Ego vehicle goes straight at an intersection and must suddenly stop to avoid collision with a bicycle, which is crossing the intersection.",
      "Ego vehicle goes straight at an intersection and must yield when a bicycle crosses the crosswalk.",
      "Ego vehicle goes straight at an intersection and must yield when a bicycle crosses the intersection.",
      "Ego vehicle goes straight at an intersection and must yield when a bicycle crosses the road in front of it.",
      "Ego vehicle goes straight at an intersection and must yield when a bicycle crosses the road.",
      "Ego vehicle goes straight at an intersection and must yield when a bicycle passes in front of it.",
      "Ego vehicle goes straight at an intersection and must yield when a bicycle passes the intersection from the opposite direction.",
      "Ego vehicle goes straight at an intersection and must yield when a bicyclist crosses the crosswalk.",
      "The ego vehicle goes straight and must yield to a bicycle crossing the crosswalk."
    ],
    "body": "param carla_map = 'Town01'\nmodel scenic.simulators.carla.model\nEGO_MODEL = \"vehicle.lincoln.mkz_2017\"\nBICYCLE_MIN_SPEED = 1.5\nTHRESHOLD = 18\nBRAKE_ACTION = 1.0\nSAFETY_DISTANCE = 10\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(trajectory = trajectory)\n    interrupt when withinDistanceToObjsInLane(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_ACTION)\nbehavior BicycleBehavior(speed=3, threshold=15):\n    do CrossingBehavior(ego, speed, threshold)\nintersec = Uniform(*network.intersections)\nstartLane = Uniform(*intersec.incomingLanes)\nmaneuver = Uniform(*startLane.maneuvers)\nego_trajectory = [maneuver.startLane, maneuver.connectingLane, maneuver.endLane]\nspot = OrientedPoint in maneuver.startLane.centerline\nego = Car at spot,\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(trajectory = ego_trajectory)\nspotBicycle = OrientedPoint in maneuver.endLane.centerline,\n    facing roadDirection\nbicycle = Bicycle at spotBicycle offset by 3.5@0,\n    with heading 90 deg relative to spotBicycle.heading,\n    with behavior BicycleBehavior(BICYCLE_MIN_SPEED, THRESHOLD),\n    with regionContainedIn None\nrequire 10 <= (distance to intersec) <= 15\nrequire 10 <= (distance from bicycle to intersec) <= 15\nterminate when (distance to spot) > 50",
    "docstring": "Obstacle avoidance without prior action.\nThe ego-vehicle encounters an obstacle / unexpected entity on the road and must perform an emergency brake or an avoidance maneuver.",
    "has_docstring": true,
    "name": "carlaChallenge4"
  },
  {
    "augmented_docstrings": [
      "A car is driving down the road and must yield to an oncoming car when it reaches a 4-way intersection. The car must brake to avoid a collision and then perform a lane change to bypass the oncoming car.",
      "Ego vehicle must maintain safety distance from blocking car and yield to oncoming car at an intersection.",
      "Ego vehicle must yield to an oncoming car when making a lane change to the left at an intersection.",
      "Ego vehicle needs to yield to an oncoming car on the opposite lane when making a left turn, and bypass the blocking car.",
      "Ego vehicle needs to yield to oncoming car while making a lane change.",
      "In this scenario, the Ego-vehicle is driving on a two-way road, and needs to negotiate with other vehicles to pass a blocking car. The ego-vehicle must reduce its speed when it sees an oncoming car in the opposite lane, and yield to the oncoming car if the oncoming car is too close to pass safely. The ego-vehicle must then successfully bypass the blocking car to continue driving.",
      "In this scenario, the ego-vehicle is trying to pass an oncoming vehicle on a two-way road. The ego-vehicle must slow down and wait when the oncoming vehicle is too close, and must make a lane change to bypass the oncoming vehicle when the gap is large enough.",
      "The ego vehicle is driving straight on a road with a lane to its left, and an oncoming car is driving in the opposite direction on the lane to the left of the ego vehicle. The ego vehicle needs to detect the oncoming car, yield, and then bypass the oncoming car in the opposite lane.",
      "The ego vehicle needs to safely bypass a blocking car at an intersection. The ego vehicle is required to yield to the oncoming car in the opposite lane, and then to change lanes in order to bypass the blocking car.",
      "The ego vehicle needs to take evasive action to avoid a collision with a blocking car at an intersection. The ego-vehicle must wait for an oncoming car to pass before attempting to change lanes and pass the blocking car.",
      "The ego-vehicle has to cross an intersection blocked by a car on the same lane. It needs to brake when the oncoming car is in sight and switch lanes when the blocking car can see it.",
      "The ego-vehicle is driving along a straight lane and approaching an intersection where a blocking car is present. It needs to yield to the oncoming car and wait for it to pass, before it can proceed.",
      "The ego-vehicle needs to merge into a lane with oncoming traffic and yield to the oncoming car. The ego-vehicle needs to brake when the oncoming car is too close and bypass the blocking car when the oncoming car is too far away.",
      "The ego-vehicle needs to safely negotiate a 4-way intersection by passing the blocking car and yielding the oncoming car.",
      "The ego-vehicle needs to yield to an oncoming car at an intersection. The ego-vehicle must brake and wait until the oncoming car is far enough away before proceeding.",
      "The ego-vehicle needs to yield to an oncoming car when approaching a four-way intersection. The ego-vehicle must brake when the oncoming car gets within a certain distance, and then must change lanes in order to pass the oncoming car.",
      "The ego-vehicle needs to yield to an oncoming vehicle at an intersection. The ego-vehicle attempts to use a lane-change to bypass the oncoming vehicle if the oncoming vehicle is too close.",
      "This Scenic scenario defines a situation where an oncoming car needs to yield to the ego-vehicle. The ego-vehicle is placed in an intersection with a blocking car in the opposite direction of the oncoming car. The ego-vehicle has to brake in order to avoid a collision with the oncoming car. The ego-vehicle then has to maneuver to bypass the blocking car.",
      "This scenario sets up a situation where the ego-vehicle is required to yield to oncoming traffic at an intersection. The ego-vehicle must slow down and yield in time to avoid a collision with the oncoming car. The ego-vehicle can then decide to bypass the blocking car in the adjacent lane.",
      "This scenario simulates the situation when an oncoming car is speeding towards an intersection, and the ego-vehicle needs to adjust its speed and lane in order to avoid a collision. The ego-vehicle has to brake to avoid the collision, and then change its lane in order to bypass the oncoming car at a safe distance."
    ],
    "body": "param carla_map = 'Town07'\nmodel scenic.simulators.carla.model\nONCOMING_THROTTLE = 0.6\nEGO_SPEED = 7\nONCOMING_CAR_SPEED = 10\nDIST_THRESHOLD = 13\nYIELD_THRESHOLD = 5\nBLOCKING_CAR_DIST = Range(15, 20)\nBREAK_INTENSITY = 0.8\nBYPASS_DIST = 5\nDIST_BTW_BLOCKING_ONCOMING_CARS = 10\nDIST_TO_INTERSECTION = 15\nbehavior EgoBehavior(path):\n\tcurrent_lane = network.laneAt(self)\n\tlaneChangeCompleted = False\n\tbypassed = False\n\ttry:\n\t\tdo FollowLaneBehavior(EGO_SPEED, laneToFollow=current_lane)\n\tinterrupt when (distance to blockingCar) < DIST_THRESHOLD and not laneChangeCompleted:\n\t\tif ego can see oncomingCar:\n\t\t\ttake SetBrakeAction(BREAK_INTENSITY)\n\t\telif (distance to oncomingCar) > YIELD_THRESHOLD:\n\t\t\tdo LaneChangeBehavior(path, is_oppositeTraffic=True, target_speed=EGO_SPEED)\n\t\t\tdo FollowLaneBehavior(EGO_SPEED, is_oppositeTraffic=True) until (distance to blockingCar) > BYPASS_DIST\n\t\t\tlaneChangeCompleted = True\n\t\telse:\n\t\t\twait\n\tinterrupt when (blockingCar can see ego) and (distance to blockingCar) > BYPASS_DIST and not bypassed:\n\t\tcurrent_laneSection = network.laneSectionAt(self)\n\t\trightLaneSec = current_laneSection._laneToLeft\n\t\tdo LaneChangeBehavior(rightLaneSec, is_oppositeTraffic=False, target_speed=EGO_SPEED)\n\t\tbypassed = True\nbehavior OncomingCarBehavior(path = []):\n\tdo FollowLaneBehavior(ONCOMING_CAR_SPEED)\nlaneSecsWithLeftLane = []\nfor lane in network.lanes:\n\tfor laneSec in lane.sections:\n\t\tif laneSec._laneToLeft is not None:\n\t\t\tif laneSec._laneToLeft.isForward is not laneSec.isForward:\n\t\t\t\tlaneSecsWithLeftLane.append(laneSec)\nassert len(laneSecsWithLeftLane) > 0, \\\n\t'No lane sections with adjacent left lane with opposing \\\n\ttraffic direction in network.'\ninitLaneSec = Uniform(*laneSecsWithLeftLane)\nleftLaneSec = initLaneSec._laneToLeft\nspawnPt = OrientedPoint on initLaneSec.centerline\noncomingCar = Car on leftLaneSec.centerline,\n\twith behavior OncomingCarBehavior()\nego = Car at spawnPt,\n\twith behavior EgoBehavior(leftLaneSec)\nblockingCar = Car following roadDirection from ego for BLOCKING_CAR_DIST,\n\t\t\t\twith viewAngle 90 deg\nrequire blockingCar can see oncomingCar\nrequire (distance from blockingCar to oncomingCar) < DIST_BTW_BLOCKING_ONCOMING_CARS\nrequire (distance from blockingCar to intersection) > DIST_TO_INTERSECTION",
    "docstring": "Ego-vehicle must go around a blocking object using the opposite lane, yielding to oncoming traffic.",
    "has_docstring": true,
    "name": "carlaChallenge6"
  },
  {
    "augmented_docstrings": [
      "Ego vehicle and adversary vehicle drive towards a signalized 4-way intersection from opposite lanes, and the ego vehicle must quickly break to avoid collision when the adversary vehicle turns left.",
      "Ego vehicle and an adversary vehicle approach a four-way intersection from opposite directions and the ego vehicle must stop to avoid a collision.",
      "Ego vehicle and an adversary vehicle must both make a left turn at a 4-way intersection and obey traffic lights.",
      "Ego vehicle goes left at a 4-way signalized intersection, and must brake to avoid collision when adversary vehicle from opposite lane goes straight.",
      "Ego vehicle is driving on a highway and must stop to avoid a collision when it is about to turn left at a signalized intersection and an adversary vehicle is about to cross from an opposing lane.",
      "Ego vehicle is driving on a left lane and must stop when an adversary vehicle is turning left from the opposite lane at a 4-way signalized intersection.",
      "Ego vehicle is making a left turn at a signalized 4-way intersection and must suddenly stop to avoid collision with an adversary vehicle coming from the opposite direction.",
      "Ego vehicle makes a left turn at a 4-way intersection, while the adversary vehicle goes straight. The ego vehicle must stop if the adversary vehicle is within a certain distance.",
      "Ego vehicle makes a left turn at a signalized 4-way intersection and must come to a stop when an adversary vehicle is coming straight.",
      "Ego vehicle makes left turn at 4-way intersection, while adversary vehicle goes straight, and must react to a potential collision by braking.",
      "Ego vehicle must make a left turn at a signalized 4-way intersection while yielding to the straight-going adversary vehicle that is coming from the opposite direction.",
      "Ego vehicle must make a left turn while an adversary vehicle going straight turns into the same intersection.",
      "Ego vehicle must stop at a 4-way intersection when an adversary vehicle from the opposite lane goes straight.",
      "Ego vehicle must turn left at a 4-way signalized intersection and yield to the straight-going adversary vehicle from the opposite lane.",
      "Ego vehicle must yield to adversary vehicle making a left turn at a signalized 4-way intersection.",
      "Ego vehicle turns left at a 4-way intersection while an adversary vehicle goes straight",
      "Ego-vehicle and an adversary vehicle spawn in opposite lanes of a 4-way intersection and make left turn movements. Ego-vehicle must remain within a safety distance of the adversary vehicle.",
      "Ego-vehicle must stop at a red traffic-light at an intersection and yield to oncoming straight-driving adversary vehicle.",
      "Ego-vehicle must stop at a signalized 4-way intersection and yield to the oncoming traffic.",
      "Ego-vehicle must stop to avoid collision when an oncoming vehicle makes a left turn at a 4-way intersection with traffic lights."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nEGO_MODEL = \"vehicle.lincoln.mkz_2017\"\nEGO_SPEED = 10\nSAFETY_DISTANCE = 20\nBRAKE_INTENSITY = 1.0\nmonitor TrafficLights:\n    freezeTrafficLights()\n    while True:\n        if withinDistanceToTrafficLight(ego, 100):\n            setClosestTrafficLightStatus(ego, \"green\")\n        if withinDistanceToTrafficLight(adversary, 100):\n            setClosestTrafficLightStatus(adversary, \"green\")\n        wait\nbehavior AdversaryBehavior(trajectory):\n    do FollowTrajectoryBehavior(trajectory=trajectory)\nbehavior EgoBehavior(speed, trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=speed, trajectory=trajectory)\n        do FollowLaneBehavior(target_speed=speed)\n    interrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_INTENSITY)\nfourWayIntersection = filter(lambda i: i.is4Way and i.isSignalized, network.intersections)\nintersec = Uniform(*fourWayIntersection)\nego_start_lane = Uniform(*intersec.incomingLanes)\nego_maneuvers = filter(lambda i: i.type == ManeuverType.LEFT_TURN, ego_start_lane.maneuvers)\nego_maneuver = Uniform(*ego_maneuvers)\nego_trajectory = [ego_maneuver.startLane, ego_maneuver.connectingLane, ego_maneuver.endLane]\nego_start_section = ego_maneuver.startLane.sections[-1]\nadv_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, ego_maneuver.conflictingManeuvers)\nadv_maneuver = Uniform(*adv_maneuvers)\nadv_trajectory = [adv_maneuver.startLane, adv_maneuver.connectingLane, adv_maneuver.endLane]\nadv_start_lane = adv_maneuver.startLane\nadv_end_section = adv_maneuver.endLane.sections[0]\nego_spawn_pt = OrientedPoint in ego_maneuver.startLane.centerline\nadv_spawn_pt = OrientedPoint in adv_maneuver.startLane.centerline\nego = Car at ego_spawn_pt,\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED, ego_trajectory)\nadversary = Car at adv_spawn_pt,\n    with behavior AdversaryBehavior(adv_trajectory)\nrequire (ego_start_section.laneToLeft == adv_end_section)  # make sure the ego and adversary are spawned in opposite lanes\nrequire 25 <= (distance to intersec) <= 30\nrequire 15 <= (distance from adversary to intersec) <= 20\nterminate when (distance to ego_spawn_pt) > 70",
    "docstring": "Unprotected left turn at intersection with oncoming traffic.\nThe ego-vehicle is performing an unprotected left turn at an intersection, yielding to oncoming traffic.",
    "has_docstring": true,
    "name": "carlaChallenge8"
  },
  {
    "augmented_docstrings": [
      "Ego Vehicle must wait until the adversary vehicle passes before making a left turn.",
      "Ego Vehicle performs a left turn to overtake a vehicle ahead while avoiding a collision with an oncoming vehicle.",
      "Ego Vehicle performs a left turn while an adversary vehicle passes straight through a 4-way intersection.",
      "Ego Vehicle takes a left turn to cross an intersection while an adversary vehicle is traveling straight through the intersection.",
      "Ego Vehicle turns left at a 4-way intersection while the adversary vehicle goes straight.",
      "Ego vehicle attempts to make a left turn at an intersection while an adversary vehicle is quickly approaching.",
      "Ego vehicle attempts to make a left turn at an intersection, while adversary vehicle goes straight.",
      "Ego vehicle must follow a left-turn trajectory while an adversary vehicle follows a straight trajectory at a 4-way intersection.",
      "Ego vehicle must make a left turn at an intersection while avoiding an adversary vehicle traveling straight in the opposite lane.",
      "Ego vehicle must perform a left turn maneuver at an intersection while avoiding a straight-moving adversary vehicle.",
      "Ego vehicle performs a left turn at a 4-way intersection while an adversary vehicle drives straight ahead.",
      "Ego vehicle performs a left turn at a 4-way intersection while an adversary vehicle in an adjacent lane passes straight.",
      "Ego vehicle performs a left turn at a 4-way intersection while an adversary vehicle passes by in a straight trajectory.",
      "Ego vehicle performs a left turn at a 4-way intersection while the adversary vehicle continues straight.",
      "Ego vehicle performs a left turn at an intersection while an adversary vehicle passes through straight.",
      "Ego vehicle performs a left turn while an adversary vehicle is making a straight through the 4-way intersection.",
      "Ego vehicle travels a trajectory that requires it to make a left turn at an intersection, while an adversary vehicle travels a straight trajectory.",
      "Ego vehicle turns left at a 4-way intersection while an adversary vehicle passes straight ahead.",
      "Ego vehicle turns left at a 4-way intersection while another vehicle travelling straight passes by from a different lane.",
      "Ego vehicle turns left onto a new lane while adversary vehicle passes in straight lane at 4-way intersection."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\nADV_INIT_DIST = [15, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\nadvInitLane = Uniform(*intersection.incomingLanes)\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\negoInitLane = Uniform(*filter(lambda m:\n\t\tm.type is ManeuverType.STRAIGHT,\n\t\tadvManeuver.reverseManeuvers)\n\t).startLane\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "docstring": "Ego vehicle makes a left turn at 4-way intersection and must suddenly stop to avoid collision when adversary vehicle from opposite lane goes straight.",
    "has_docstring": true,
    "name": "intersection_02"
  },
  {
    "augmented_docstrings": [
      "Ego and adversary vehicles make a left turn at 4-way intersection and must avoid collision.",
      "Ego and adversary vehicles make left turns at 4-way intersection, avoiding collision by accelerating or braking.",
      "Ego vehicle and adversary vehicle approach a 4-way intersection simultaneously and both make a left turn.",
      "Ego vehicle and adversary vehicle go straight and turn left, respectively, at 4-way intersection and must suddenly stop to avoid collision.",
      "Ego vehicle goes straight and adversary vehicle makes a left turn at 4-way intersection.",
      "Ego vehicle goes straight and adversary vehicle makes left turn at 4-way intersection, with ego vehicle needing to yield to the left turning adversary.",
      "Ego vehicle goes straight and must suddenly stop to avoid collision when adversary vehicle makes a left turn.",
      "Ego vehicle goes straight and must yield to adversary vehicle making a left turn at 4-way intersection.",
      "Ego vehicle goes straight and must yield to left turn from oncoming traffic.",
      "Ego vehicle goes straight and must yield to left-turning adversary vehicle.",
      "Ego vehicle goes straight at an intersection and must yield to a left-turning adversary vehicle from opposite lane.",
      "Ego vehicle is going straight and must yield when adversary vehicle from opposite lane makes a left turn.",
      "Ego vehicle is making a left turn at a 4-way intersection and must yield to an oncoming vehicle making a left turn from the opposite lane.",
      "Ego vehicle makes a left turn and must yield to oncoming vehicle making a left turn from the opposite lane.",
      "Ego vehicle makes a left turn and must yield when adversary vehicle from opposite lane goes straight.",
      "Ego vehicle makes a left turn at 4-way intersection and must yield to adversary vehicle from the opposite lane making a left turn.",
      "Ego vehicle makes a left turn at 4-way intersection and must yield to an adversary vehicle making a left turn from an opposite lane.",
      "Ego vehicle makes a left turn at 4-way intersection and must yield when an adversary vehicle from the left lane makes a left turn as well.",
      "Ego vehicle making a left turn at a 4-way intersection must yield to oncoming traffic making a left turn in the opposite direction.",
      "Two cars make left turns at 4-way intersection, each from opposite lanes."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\nADV_INIT_DIST = [15, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m:\n\t\tm.type in (ManeuverType.STRAIGHT, ManeuverType.LEFT_TURN),\n\t\tegoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\nadvInitLane = Uniform(*filter(lambda m:\n\t\tm.type is ManeuverType.STRAIGHT,\n\t\tUniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoInitLane.maneuvers))\n\t\t\t.conflictingManeuvers)\n\t).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "docstring": "Ego vehicle either goes straight or makes a left turn at 4-way intersection and must suddenly stop to avoid collision when adversary vehicle from lateral lane makes a left turn.",
    "has_docstring": true,
    "name": "intersection_04"
  },
  {
    "augmented_docstrings": [
      "Ego vehicle is making a right turn at 4-way intersection and must avoid collision with an oncoming vehicle that is driving straight.",
      "Ego vehicle is making a right turn at 4-way intersection and must suddenly stop to avoid collision when adversary vehicle from opposite lane goes straight.",
      "Ego vehicle is making a right turn at a 4-way intersection, while an adversary vehicle is approaching from the opposite lane and going straight.",
      "Ego vehicle makes a right turn at 4-way intersection and must suddenly stop to avoid collision when adversary vehicle from opposite lane goes straight.",
      "Ego vehicle makes a right turn at a 4-way intersection and must suddenly stop to avoid collision when an oncoming vehicle goes straight.",
      "Ego vehicle makes a right turn at a 4-way intersection, yielding to oncoming traffic traveling straight.",
      "Ego vehicle takes a right turn at 4-way intersection and must avoid collision with adversary vehicle from opposite lane going straight."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\nADV_INIT_DIST = [10, 15]\nparam ADV_SPEED = VerifaiRange(7, 10)\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.RIGHT_TURN, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\nadvInitLane = Uniform(*filter(lambda m:\n\t\tm.type is ManeuverType.STRAIGHT,\n\t\tUniform(*filter(lambda m: \n\t\t\tm.type is ManeuverType.STRAIGHT, \n\t\t\tegoInitLane.maneuvers)\n\t\t).conflictingManeuvers)\n\t).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "docstring": "Ego vehicle makes a right turn at 4-way intersection while adversary vehicle from lateral lane goes straight.",
    "has_docstring": true,
    "name": "intersection_06"
  },
  {
    "augmented_docstrings": [
      "Ego vehicle drives straight through a 3-way intersection while an adversary vehicle from a lateral lane turns left.",
      "Ego vehicle goes straight at 3-way intersection while adversary vehicle from lateral lane makes a left turn.",
      "Ego vehicle goes straight at 3-way intersection while adversary vehicle from lateral lane turns left.",
      "Ego vehicle goes straight at a 3-way intersection while adversary vehicle from lateral lane makes a left turn.",
      "Ego vehicle goes straight at a 3-way intersection while adversary vehicle from lateral lane turns left.",
      "Ego vehicle goes straight while adversary vehicle from lateral lane makes a left turn at 3-way intersection.",
      "Ego vehicle goes straight while adversary vehicle from lateral lane makes a left turn.",
      "Ego vehicle going straight and adversary vehicle making a left turn at a 3-way intersection.",
      "Ego vehicle makes a straight line at 3-way intersection while adversary vehicle from lateral lane makes a left turn."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nEGO_INIT_DIST = [20, 40]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\nADV_INIT_DIST = [0, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\nbehavior EgoBehavior(trajectory):\n\ttry:\n\t\tdo FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n\tinterrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\tinterrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n\t\tterminate\nintersection = Uniform(*filter(lambda i: i.is3Way, network.intersections))\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\nadvInitLane = Uniform(*filter(lambda m:\n\t\tm.type is ManeuverType.STRAIGHT,\n\t\tegoManeuver.reverseManeuvers)\n\t).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior(egoTrajectory)\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "docstring": "Ego vehicle goes straight at 3-way intersection and must suddenly stop to avoid collision when adversary vehicle makes a left turn.",
    "has_docstring": true,
    "name": "intersection_08"
  },
  {
    "augmented_docstrings": [
      "Ego vehicle changes lane to its right to bypass a stationary vehicle when a faster vehicle from the opposite direction appears.",
      "Ego vehicle changes lane to the right to bypass a stationary car and avoid a collision with an oncoming vehicle.",
      "Ego vehicle must avoid a stationary object by changing to the adjacent lane and bypassing it.",
      "Ego vehicle must bypass a stationary object in the same lane by switching to adjacent lane.",
      "Ego vehicle must bypass stationery vehicle by switching lane to the right to avoid collision with oncoming vehicle from the opposite direction.",
      "Ego vehicle must change lanes to the right in order to bypass a stationary vehicle, while yielding to oncoming traffic.",
      "Ego vehicle must drive around a stationary object using the opposite lane, avoiding oncoming traffic.",
      "Ego vehicle must go around a stationary object by changing lanes to avoid collision with adversary vehicle from lateral lane.",
      "Ego vehicle must initiate a lane change to the right to bypass a stationary vehicle that is blocking the road.",
      "Ego vehicle must make a lane change to the right to bypass a stationary vehicle at a 4-way intersection and avoid collision with an adversary vehicle.",
      "Ego vehicle must make a safe lane change in response to a stationary object blocking its lane.",
      "Ego vehicle must quickly lane-change to the right in order to bypass a stationary vehicle and avoid an oncoming vehicle.",
      "Ego vehicle must safely bypass a stationary object at a 4-way intersection by changing lanes.",
      "Ego vehicle must safely bypass a stationary object by switching lanes and avoiding a collision with an oncoming vehicle turning left.",
      "Ego vehicle must safely bypass a stationary vehicle at a 4-way intersection by performing a lane change.",
      "Ego vehicle must safely bypass a stationary vehicle by switching to the adjacent lane when an adversary vehicle from the adjacent lane is making a straight move at a 4-way intersection.",
      "Ego vehicle must take evasive action to avoid a stationary obstacle by changing lanes to the right at a 4-way intersection.",
      "Ego-vehicle is behind a stationary vehicle at a 4-way intersection and must quickly bypass to the right in order to avoid a collision with an oncoming vehicle.",
      "Ego-vehicle must avoid a stationary object by performing a lane change to the right in order to evade a car coming from the opposite direction.",
      "Ego-vehicle must take evasive action by changing lanes to avoid a collision with a stationary vehicle blocking its path when an adversary vehicle from the lateral lane makes a straight turn."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nparam EGO_INIT_DIST = VerifaiRange(10, 15)\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\nSTAT_INIT_DIST = [0, 5]\nADV_INIT_DIST = [15, 20]\nADV_SPEED = 10\nBYPASS_DIST = 8\nTERM_DIST = 70\nbehavior EgoBehavior():\n\twhile (distance to adversary) < BYPASS_DIST:\n\t\ttake SetBrakeAction(globalParameters.EGO_BRAKE)\n\trightLaneSec = self.laneSection.laneToRight\n\tdo LaneChangeBehavior(\n\t\t\tlaneSectionToSwitch=rightLaneSec,\n\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\tdo FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\nstatInitLane = Uniform(*filter(lambda lane: \n\tall([sec._laneToRight is not None for sec in lane.sections]),\n\tintersection.incomingLanes))\nstatSpawnPt = OrientedPoint in statInitLane.centerline\nadvInitLane = statInitLane.sectionAt(statSpawnPt).laneToRight.lane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = OrientedPoint in advInitLane.centerline\nstationary = Car at statSpawnPt,\n\twith blueprint MODEL\nego = Car behind stationary by globalParameters.EGO_INIT_DIST,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior()\nadversary = Car at advSpawnPt,\n\twith blueprint MODEL,\n\twith behavior FollowTrajectoryBehavior(target_speed=ADV_SPEED, trajectory=advTrajectory)\nrequire STAT_INIT_DIST[0] <= (distance from stationary to intersection) <= STAT_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to statSpawnPt) > TERM_DIST",
    "docstring": "Ego Vehicle waits at 4-way intersection while adversary vehicle in adjacent lane passes before performing a lane change to bypass a stationary vehicle waiting to make a left turn.",
    "has_docstring": true,
    "name": "intersection_10"
  },
  {
    "augmented_docstrings": [
      "A parked car suddenly cuts in front of an ego vehicle, which must quickly brake to avoid a collision.",
      "Cut-in maneuver where an oncoming car from a side-street suddenly cuts in to the ego-vehicle's lane, causing the ego-vehicle to break to maintain a safe distance.",
      "Cut-in scenario where a parked car suddenly crosses a lane in front of the ego-vehicle, triggering a collision avoidance response.",
      "Ego and parked car cut-in scenario, where the parked car is cutting in and the ego vehicle must take appropriate braking action to avoid a collision.",
      "Ego vehicle driving in a street with a parked car that cuts in front of the ego vehicle. The ego vehicle must apply the brakes to avoid a collision.",
      "Ego vehicle must brake to avoid collision when parked car cuts in from the left.",
      "Ego vehicle must brake to avoid collision with a car that suddenly cuts in from the left.",
      "Ego vehicle must brake to avoid collision with a car that unexpectedly cuts in from the left side.",
      "Ego vehicle must perform a collision avoidance maneuver when a parked car suddenly cuts into its lane.",
      "Ego vehicle must react quickly and brake to avoid collision with a car that is unexpectedly cutting in from the right.",
      "Ego vehicle must react quickly to a car that suddenly cuts in from the left in order to avoid a collision.",
      "Ego vehicle must react quickly to avoid collision when another vehicle cuts in from the left unexpectedly.",
      "Ego vehicle must react to a car suddenly cutting in front of it from a parked position on the side of the road.",
      "Ego vehicle must slow down and drive defensively when a car cut into its lane from the side.",
      "Ego vehicle must take evasive action when a parked car suddenly cuts in front.",
      "Scenario in which a parked vehicle suddenly cuts in front of the ego vehicle on the same lane. The ego vehicle must respond by applying the brakes and slowing down in order to avoid a collision.",
      "Scenario where the ego vehicle must react to a car suddenly cutting in from the side of the road.",
      "The ego vehicle must avoid a parked car that suddenly cuts in from the side of the road.",
      "The ego vehicle must react to a parked car suddenly cutting in. The parked car starts out on the sidewalk and must drive in front of the ego vehicle in order to join the same lane. The ego vehicle must be able to brake in time to avoid a collision.",
      "The scenario involves an ego-vehicle driving on a straight road and a parked car that suddenly cuts in front of it, forcing the ego-vehicle to brake in order to avoid a collision."
    ],
    "body": "param carla_map = 'Town01'\nmodel scenic.simulators.carla.model\nMAX_BREAK_THRESHOLD = 1\nSAFETY_DISTANCE = 8\nPARKING_SIDEWALK_OFFSET_RANGE = 2\nCUT_IN_TRIGGER_DISTANCE = Range(10, 12)\nEGO_SPEED = 8\nPARKEDCAR_SPEED = 7\nbehavior CutInBehavior(laneToFollow, target_speed):\n\twhile (distance from self to ego) > CUT_IN_TRIGGER_DISTANCE:\n\t\twait\n\tdo FollowLaneBehavior(laneToFollow = laneToFollow, target_speed=target_speed)\nbehavior CollisionAvoidance():\n\twhile withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n\t\ttake SetBrakeAction(MAX_BREAK_THRESHOLD)\nbehavior EgoBehavior(target_speed):\n\ttry: \n\t\tdo FollowLaneBehavior(target_speed=target_speed)\n\tinterrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n\t\tdo CollisionAvoidance()\nroads = network.roads\nselect_road = Uniform(*roads)\nego_lane = select_road.lanes[0]\nego = Car on ego_lane.centerline,\n\t\twith behavior EgoBehavior(target_speed=EGO_SPEED)\nspot = OrientedPoint on visible curb\nparkedHeadingAngle = Uniform(-1,1)*Range(10,20) deg\nother = Car left of (spot offset by PARKING_SIDEWALK_OFFSET_RANGE @ 0), facing parkedHeadingAngle relative to ego.heading,\n\t\t\twith behavior CutInBehavior(ego_lane, target_speed=PARKEDCAR_SPEED),\n\t\t\twith regionContainedIn None\nrequire (angle from ego to other) - ego.heading < 0 deg\nrequire 10 < (distance from ego to other) < 20",
    "docstring": "The car ahead of ego that is badly parked over the sidewalk cuts into ego vehicle's lane.",
    "has_docstring": true,
    "name": "oas_scenario_06"
  },
  {
    "augmented_docstrings": [
      "Ego car drives on a straight lane and must safely stop to yield to a pedestrian crossing the street.",
      "Ego vehicle drives along a lane, and must stop to avoid hitting a pedestrian crossing the street.",
      "Ego vehicle drives and must suddenly stop to avoid collision with a pedestrian who is crossing the road.",
      "Ego vehicle drives down a straight road and must come to a sudden stop to avoid a pedestrian crossing the road.",
      "Ego vehicle must avoid collision with a pedestrian crossing the street.",
      "Ego vehicle must brake when a pedestrian is crossing the lane in front of it.",
      "Ego vehicle must come to a stop to avoid colliding with a pedestrian crossing the road.",
      "Ego vehicle must drive cautiously around a pedestrian who is crossing the road.",
      "Ego vehicle must safely bypass a pedestrian crossing the street.",
      "Ego vehicle must slow down and give way to a pedestrian crossing the street.",
      "Ego vehicle must slow down in order to yield to a pedestrian crossing the street.",
      "Ego vehicle must slow down to a safe speed to avoid collision with a pedestrian crossing the road.",
      "Ego vehicle must slow down to allow pedestrian to safely cross the street.",
      "Ego vehicle must slow down to avoid hitting a pedestrian who is crossing the street at a 3-way intersection.",
      "Ego vehicle must stop and wait for a pedestrian to cross the street.",
      "Ego vehicle must stop at a crosswalk to allow a pedestrian to cross.",
      "Ego vehicle must stop for a pedestrian crossing the road.",
      "Ego vehicle must stop to yield to a pedestrian crossing the roadway.",
      "Ego vehicle must yield to a pedestrian crossing the street.",
      "Ego-vehicle encounters pedestrian crossing the street and must brake to avoid a collision."
    ],
    "body": "param carla_map = 'Town01'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nparam EGO_INIT_DIST = VerifaiRange(-30, -20)\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\nparam SAFETY_DIST = VerifaiRange(10, 15)\nBUFFER_DIST = 75\nCRASH_DIST = 5\nTERM_DIST = 50\nbehavior EgoBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n    interrupt when withinDistanceToObjsInLane(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion):\n        take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\nlane = Uniform(*network.lanes)\nspawnPt = OrientedPoint on lane.centerline\nego = Car following roadDirection from spawnPt for globalParameters.EGO_INIT_DIST,\n    with blueprint MODEL,\n    with behavior EgoBehavior()\nped = Pedestrian right of spawnPt by 3,\n    with heading 90 deg relative to spawnPt.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\nrequire (distance to intersection) > BUFFER_DIST\nrequire always (ego.laneSection._slowerLane is None)\nrequire always (ego.laneSection._fasterLane is None)\nterminate when (distance to spawnPt) > TERM_DIST",
    "docstring": "Ego vehicle must suddenly stop to avoid collision when pedestrian crosses the road unexpectedly.",
    "has_docstring": true,
    "name": "pedestrian_01"
  },
  {
    "augmented_docstrings": [
      "An ego vehicle is making a left turn at an intersection while a pedestrian is crossing the street. The ego must decelerate or take an avoidance maneuver to avoid collision.",
      "Ego vehicle approaches a pedestrian crossing while making a left turn at an intersection.",
      "Ego vehicle is making a left turn at 4-way intersection when a pedestrian suddenly appears from the right. The pedestrian is crossing the road in front of the ego vehicle.",
      "Ego vehicle is turning left at an intersection while a pedestrian is crossing from the opposite side of the road.",
      "Ego vehicle makes a left turn at 4-way intersection while pedestrian from lateral sidewalk crosses the roadway.",
      "Ego vehicle makes a left turn at an intersection while a pedestrian crosses from the right.",
      "Ego vehicle makes a left turn at an intersection while a pedestrian crosses the road from the opposite direction.",
      "Ego vehicle makes a left turn at an intersection while a pedestrian crosses the road from the right side.",
      "Ego vehicle makes a left turn at an intersection while a pedestrian crosses the road in front of it.",
      "Ego vehicle makes a left turn at an intersection while a pedestrian crosses the road in front of the ego vehicle.",
      "Ego vehicle makes a left turn at an intersection while a pedestrian crosses the street from the right.",
      "Ego vehicle makes a left turn at an intersection while a pedestrian crossing the street from the right side.",
      "Ego vehicle makes a left turn at an intersection while a pedestrian is crossing the street ahead.",
      "Ego vehicle makes a left turn at an intersection while pedestrian from a lateral street crosses the ego vehicle's path.",
      "Ego vehicle makes a left turn at intersection while pedestrian crosses the street in front of it.",
      "Ego vehicle must yield to a pedestrian crossing the road while making a left turn at an intersection.",
      "Ego vehicle turns left at an intersection while a pedestrian walks across the road in front of ego vehicle.",
      "Ego vehicle turns left at intersection while pedestrian crosses from the opposite direction.",
      "Pedestrian crossing the street in front of ego vehicle. Ego vehicle must brake to avoid collision.",
      "Pedestrian is crossing the road while ego vehicle is making a left turn at a 4/3-way intersection."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\nparam SAFETY_DIST = VerifaiRange(10, 15)\nCRASH_DIST = 5\nTERM_DIST = 50\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion):\n        take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\nintersection = Uniform(*filter(lambda i: i.is4Way or i.is3Way, network.intersections))\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, intersection.maneuvers))\negoInitLane = egoManeuver.startLane\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\ntempManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.RIGHT_TURN, egoManeuver.reverseManeuvers))\ntempInitLane = tempManeuver.startLane\ntempSpawnPt = tempInitLane.centerline[-1]\nego = Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\nped = Pedestrian right of tempSpawnPt by 3,\n    with heading ego.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "docstring": "Ego vehicle makes a left turn at an intersection and must suddenly stop to avoid collision when pedestrian crosses the crosswalk.",
    "has_docstring": true,
    "name": "pedestrian_03"
  },
  {
    "augmented_docstrings": [
      "Ego vehicle goes straight at a 4-way intersection and must suddenly stop to avoid collision when a pedestrian crosses the crosswalk perpendicularly.",
      "Ego vehicle goes straight at an intersection and must suddenly stop to avoid collision when pedestrian crosses perpendicularly at a crosswalk.",
      "Ego vehicle goes straight at an intersection and must suddenly stop to avoid collision when pedestrian crosses perpendicularly to the ego vehicle's direction.",
      "Ego vehicle goes straight at an intersection and must suddenly stop to avoid collision when pedestrian crosses the crosswalk from the perpendicular street.",
      "Ego vehicle goes straight at an intersection and must suddenly stop to avoid collision when pedestrian crosses the crosswalk perpendicular to ego vehicle's heading.",
      "Ego vehicle goes straight at an intersection and must suddenly stop to avoid collision when pedestrian crosses the crosswalk perpendicular to ego vehicle's path.",
      "Ego vehicle goes straight at an intersection and must suddenly stop to avoid collision when pedestrian crosses the crosswalk perpendicular to ego's direction.",
      "Ego vehicle goes straight at an intersection and must suddenly stop to avoid collision when pedestrian crosses the crosswalk perpendicular to ego's trajectory.",
      "Ego vehicle goes straight at an intersection and must suddenly stop to avoid collision when pedestrian crosses the crosswalk perpendicular to the ego vehicle.",
      "Ego vehicle goes straight at an intersection and must suddenly stop to avoid collision when pedestrian crosses the crosswalk perpendicular to the ego's trajectory.",
      "Ego vehicle goes straight at an intersection and must suddenly stop to avoid collision when pedestrian crosses the crosswalk perpendicular to the ego.",
      "Ego vehicle goes straight at an intersection and must suddenly stop to avoid collision when pedestrian crosses the crosswalk perpendicularly.",
      "Ego vehicle goes straight at an intersection and must suddenly stop to avoid collision when pedestrian crosses the crosswalk."
    ],
    "body": "param carla_map = 'Town05'\nmodel scenic.simulators.carla.model\nMODEL = 'vehicle.lincoln.mkz_2017'\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\nparam SAFETY_DIST = VerifaiRange(10, 15)\nCRASH_DIST = 5\nTERM_DIST = 50\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion):\n        take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\nintersection = Uniform(*filter(lambda i: i.is4Way or i.is3Way, network.intersections))\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, intersection.maneuvers))\negoInitLane = egoManeuver.startLane\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = OrientedPoint in egoInitLane.centerline\ntempManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoManeuver.reverseManeuvers))\ntempInitLane = tempManeuver.startLane\ntempSpawnPt = tempInitLane.centerline[-1]\nego = Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\nped = Pedestrian right of tempSpawnPt by 3,\n    with heading -90 deg relative to ego.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST",
    "docstring": "Ego vehicle goes straight at an intersection and must yield when pedestrian crosses the crosswalk.",
    "has_docstring": true,
    "name": "pedestrian_05"
  }
]
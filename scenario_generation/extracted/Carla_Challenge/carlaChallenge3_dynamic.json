{
  "docstring": "Scenario Description\nTraffic Scenario 03 (dynamic).\nObstacle avoidance without prior action.\nThe ego-vehicle encounters an obstacle / unexpected entity on the road and must perform an\nemergency brake or an avoidance maneuver.",
  "has_docstring": true,
  "body": "# SET MAP AND MODEL (i.e. definitions of all referenceable vehicle types, road library, etc)\nparam map = localPath('../../../tests/formats/opendrive/maps/CARLA/Town05.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n# CONSTANTS\nEGO_MODEL = \"vehicle.lincoln.mkz2017\"\nEGO_SPEED = 10\nSAFETY_DISTANCE = 10\nBRAKE_INTENSITY = 1.0\n\nPEDESTRIAN_MIN_SPEED = 1.0\nTHRESHOLD = 20\n\n# EGO BEHAVIOR: Follow lane and brake when reaches threshold distance to obstacle\nbehavior EgoBehavior(speed=10):\n    try:\n        do FollowLaneBehavior(target_speed=speed)\n    interrupt when withinDistanceToObjsInLane(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_INTENSITY)\n\nbehavior PedestrianBehavior(min_speed=1, threshold=10):\n    do CrossingBehavior(ego, min_speed, threshold)\n\n## DEFINING SPATIAL RELATIONS\n# Please refer to scenic/domains/driving/roads.py how to access detailed road infrastructure\n# 'network' is the 'class Network' object in roads.py \n\n# make sure to put '*' to uniformly randomly select from all elements of the list, 'network.lanes'\nlane = Uniform(*network.lanes)\n\nspot = OrientedPoint on lane.centerline\nvending_spot = OrientedPoint following roadDirection from spot for -3\n\npedestrian = Pedestrian right of spot by 3,\n    with heading 90 deg relative to spot.heading,\n    with regionContainedIn None,\n    with behavior PedestrianBehavior(PEDESTRIAN_MIN_SPEED, THRESHOLD)\n\nvending_machine = VendingMachine right of vending_spot by 3,\n    with heading -90 deg relative to vending_spot.heading,\n    with regionContainedIn None\n\nego = Car following roadDirection from spot for Range(-30, -20),\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED)\n\nrequire (distance to intersection) > 75\nrequire (ego.laneSection._slowerLane is None)\nterminate when (distance to spot) > 50"
}
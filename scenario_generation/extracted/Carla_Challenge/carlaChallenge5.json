{
  "docstring": "Scenario Description\nBased on 2019 Carla Challenge Traffic Scenario 05.\nEgo-vehicle performs a lane changing to evade a leading vehicle, which is moving too slowly.",
  "has_docstring": true,
  "body": "param carla_map = 'Town05'\nmodel scenic.domains.driving.model\n\n#CONSTANTS\nEGO_SPEED = 10\nSLOW_CAR_SPEED = 6\nEGO_TO_BICYCLE = 10\nDIST_THRESHOLD = 15\n\n#EGO BEHAVIOR: Follow lane, then perform a lane change\nbehavior EgoBehavior(leftpath, origpath=[]):\n\tlaneChangeCompleted = False\n\n\ttry: \n\t\tdo FollowLaneBehavior(EGO_SPEED)\n\n\tinterrupt when withinDistanceToAnyObjs(self, DIST_THRESHOLD) and not laneChangeCompleted:\n\t\tdo LaneChangeBehavior(laneSectionToSwitch=leftpath, target_speed=10)\n\t\tlaneChangeCompleted = True\n\n#OTHER BEHAVIOR\nbehavior SlowCarBehavior():\n\tdo FollowLaneBehavior(SLOW_CAR_SPEED)\n\n#GEOMETRY\nlaneSecsWithRightLane = []\nfor lane in network.lanes:\n\tfor laneSec in lane.sections:\n\t\tif laneSec._laneToRight != None:\n\t\t\tlaneSecsWithRightLane.append(laneSec)\n\nassert len(laneSecsWithRightLane) > 0, \\\n\t'No lane sections with adjacent left lane in network.'\n\ninitLaneSec = Uniform(*laneSecsWithRightLane)\nrightLane = initLaneSec._laneToRight\n\n#PLACEMENT\nspawnPt = OrientedPoint on initLaneSec.centerline\n\nego = Car at spawnPt,\n\twith behavior EgoBehavior(rightLane, [initLaneSec])\n\ncyclist = Car following roadDirection from ego for EGO_TO_BICYCLE,\n\twith behavior SlowCarBehavior()\n\nrequire (distance from ego to intersection) > 10\nrequire (distance from cyclist to intersection) > 10"
}
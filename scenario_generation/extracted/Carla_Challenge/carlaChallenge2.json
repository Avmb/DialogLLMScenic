{
  "docstring": "Scenario Description\nTraffic Scenario 02.\nLongitudinal control after leading vehicle\u2019s brake.\nThe leading vehicle decelerates suddenly due to an obstacle and the ego-vehicle must perform an\nemergency brake or an avoidance maneuver.",
  "has_docstring": true,
  "body": "## SET MAP AND MODEL (i.e. definitions of all referenceable vehicle types, road library, etc)\nparam map = localPath('../../../tests/formats/opendrive/maps/CARLA/Town01.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n## CONSTANTS\nEGO_MODEL = \"vehicle.lincoln.mkz2017\"\nEGO_SPEED = 10\nEGO_BRAKING_THRESHOLD = 12\n\nLEAD_CAR_SPEED = 10\nLEADCAR_BRAKING_THRESHOLD = 10\n\nBRAKE_ACTION = 1.0\n\n## DEFINING BEHAVIORS\n# EGO BEHAVIOR: Follow lane, and brake after passing a threshold distance to the leading car\nbehavior EgoBehavior(speed=10):\n    try:\n        do FollowLaneBehavior(speed)\n\n    interrupt when withinDistanceToAnyCars(self, EGO_BRAKING_THRESHOLD):\n        take SetBrakeAction(BRAKE_ACTION)\n\n# LEAD CAR BEHAVIOR: Follow lane, and brake after passing a threshold distance to obstacle\nbehavior LeadingCarBehavior(speed=10):\n    try: \n        do FollowLaneBehavior(speed)\n\n    interrupt when withinDistanceToAnyObjs(self, LEADCAR_BRAKING_THRESHOLD):\n        take SetBrakeAction(BRAKE_ACTION)\n\n## DEFINING SPATIAL RELATIONS\n# Please refer to scenic/domains/driving/roads.py how to access detailed road infrastructure\n# 'network' is the 'class Network' object in roads.py\n\n# make sure to put '*' to uniformly randomly select from all elements of the list, 'lanes'\nlane = Uniform(*network.lanes)\n\nobstacle = Trash on lane.centerline\n\nleadCar = Car following roadDirection from obstacle for Range(-50, -30),\n        with behavior LeadingCarBehavior(LEAD_CAR_SPEED)\n\nego = Car following roadDirection from leadCar for Range(-15, -10),\n        with blueprint EGO_MODEL,\n        with behavior EgoBehavior(EGO_SPEED)\n\nrequire (distance to intersection) > 80\nterminate when ego.speed < 0.1 and (distance to obstacle) < 30"
}
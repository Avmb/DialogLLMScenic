{
  "docstring": "Scenario Description\nTraffic Scenario 01.\nControl loss without previous action.\nThe ego-vehicle loses control due to bad conditions on the road and it must recover, coming back to\nits original lane.",
  "has_docstring": true,
  "body": "## SET MAP AND MODEL (i.e. definitions of all referenceable vehicle types, road library, etc)\nparam map = localPath('../../../tests/formats/opendrive/maps/CARLA/Town01.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n## CONSTANTS\nEGO_MODEL = \"vehicle.lincoln.mkz2017\"\nEGO_SPEED = 10\n\n## DEFINING BEHAVIORS\n# EGO BEHAVIOR: Follow lane, and brake after passing a threshold distance to the leading car\nbehavior EgoBehavior(speed=10):\n    do FollowLaneBehavior(speed)\n\n## DEFINING SPATIAL RELATIONS\n# Please refer to scenic/domains/driving/roads.py how to access detailed road infrastructure\n# 'network' is the 'class Network' object in roads.py\n\n# make sure to put '*' to uniformly randomly select from all elements of the list, 'lanes'\nlane = Uniform(*network.lanes)\n\nstart = OrientedPoint on lane.centerline\nego = Car at start,\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED)\n\ndebris1 = Debris following roadDirection for Range(10, 20)\ndebris2 = Debris following roadDirection from debris1 for Range(5, 10)\ndebris3 = Debris following roadDirection from debris2 for Range(5, 10)\n\nrequire (distance to intersection) > 50\nterminate when (distance from debris3 to ego) > 10 and (distance to start) > 50"
}
{
  "docstring": "Scenario Description\nTraffic Scenario 03 (static).\nObstacle avoidance without prior action.\nThe ego-vehicle encounters an obstacle / unexpected entity on the road and must perform an\nemergency brake or an avoidance maneuver.",
  "has_docstring": true,
  "body": "## SET MAP AND MODEL (i.e. definitions of all referenceable vehicle types, road library, etc)\nparam map = localPath('../../../tests/formats/opendrive/maps/CARLA/Town01.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n## CONSTANTS\nEGO_MODEL = \"vehicle.lincoln.mkz2017\"\nEGO_SPEED = 10\nEGO_BRAKING_THRESHOLD = 12\n\nBRAKE_ACTION = 1.0\n\n## DEFINING BEHAVIORS\n# EGO BEHAVIOR: Follow lane, and brake after passing a threshold distance to the leading car\nbehavior EgoBehavior(speed=10):\n    try:\n        do FollowLaneBehavior(speed)\n\n    interrupt when withinDistanceToAnyObjs(self, EGO_BRAKING_THRESHOLD):\n        take SetBrakeAction(BRAKE_ACTION)\n\n## DEFINING SPATIAL RELATIONS\n# Please refer to scenic/domains/driving/roads.py how to access detailed road infrastructure\n# 'network' is the 'class Network' object in roads.py\n\n# make sure to put '*' to uniformly randomly select from all elements of the list, 'lanes'\nlane = Uniform(*network.lanes)\n\nspawnPt = OrientedPoint on lane.centerline\n\nobstacle = Trash at spawnPt offset by Range(1, -1) @ 0\n\nego = Car following roadDirection from spawnPt for Range(-50, -30),\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED)\n\nrequire (distance to intersection) > 75\nterminate when ego.speed < 0.1 and (distance to obstacle) < 15"
}
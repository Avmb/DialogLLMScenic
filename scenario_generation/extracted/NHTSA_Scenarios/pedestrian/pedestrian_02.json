{
  "docstring": "TITLE: Pedestrian 02\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Both ego and adversary vehicles must suddenly stop to avoid \ncollision when pedestrian crosses the road unexpectedly.\nSOURCE: Carla Challenge, #03",
  "has_docstring": true,
  "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town01.xodr')\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nparam EGO_INIT_DIST = VerifaiRange(-30, -20)\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\n\nparam ADV_INIT_DIST = VerifaiRange(40, 50)\nparam ADV_SPEED = VerifaiRange(7, 10)\nADV_BRAKE = 1.0\n\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\n\nparam SAFETY_DIST = VerifaiRange(10, 15)\nBUFFER_DIST = 75\nCRASH_DIST = 5\nTERM_DIST = 50\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior EgoBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n    interrupt when withinDistanceToObjsInLane(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion):\n        take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\nbehavior AdvBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n    interrupt when (withinDistanceToObjsInLane(self, globalParameters.SAFETY_DIST) or (distance from adv to ped) < 10) and (ped in network.drivableRegion):\n        take SetBrakeAction(ADV_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\nroad = Uniform(*filter(lambda r: len(r.forwardLanes.lanes) == len(r.backwardLanes.lanes) == 1, network.roads))\negoLane = Uniform(road.forwardLanes.lanes)[0]\nspawnPt = OrientedPoint on egoLane.centerline\nadvSpawnPt = OrientedPoint following roadDirection from spawnPt for globalParameters.ADV_INIT_DIST\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car following roadDirection from spawnPt for globalParameters.EGO_INIT_DIST,\n    with blueprint MODEL,\n    with behavior EgoBehavior()\n\nped = Pedestrian right of spawnPt by 3,\n    with heading 90 deg relative to spawnPt.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\n\nadv = Car left of advSpawnPt by 3,\n    with blueprint MODEL,\n    with heading 180 deg relative to spawnPt.heading,\n    with behavior AdvBehavior()\n\nrequire (distance from spawnPt to intersection) > BUFFER_DIST\nrequire always (ego.laneSection._slowerLane is None)\nrequire always (ego.laneSection._fasterLane is None)\nrequire always (adv.laneSection._slowerLane is None)\nrequire always (adv.laneSection._fasterLane is None)\nterminate when (distance to spawnPt) > TERM_DIST"
}
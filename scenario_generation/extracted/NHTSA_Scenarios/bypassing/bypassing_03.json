{
  "docstring": "TITLE: Bypassing 03\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle performs a lane change to bypass a slow \nadversary vehicle but cannot return to its original lane because \nthe adversary accelerates. Ego vehicle must then slow down to avoid \ncollision with leading vehicle in new lane.\nSOURCE: NHSTA, #16",
  "has_docstring": true,
  "body": "#################################\n# MAP AND MODEL                 #\n#################################\n\nparam map = localPath('../../../../tests/formats/opendrive/maps/CARLA/Town03.xodr')\nparam carla_map = 'Town03'\nmodel scenic.simulators.carla.model\n\n#################################\n# CONSTANTS                     #\n#################################\n\nMODEL = 'vehicle.lincoln.mkz2017'\n\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.7, 1.0)\n\nparam ADV_DIST = VerifaiRange(10, 15)\nparam ADV_INIT_SPEED = VerifaiRange(2, 4)\nparam ADV_END_SPEED = 2 * VerifaiRange(7, 10)\nADV_BUFFER_TIME = 5\n\nLEAD_DIST = globalParameters.ADV_DIST + 10\nLEAD_SPEED = globalParameters.EGO_SPEED - 4\n\nBYPASS_DIST = [15, 10]\nSAFE_DIST = 15\nINIT_DIST = 50\nTERM_DIST = 70\nTERM_TIME = 10\n\n#################################\n# AGENT BEHAVIORS               #\n#################################\n\nbehavior DecelerateBehavior(brake):\n\ttake SetBrakeAction(brake)\n\nbehavior EgoBehavior():\n\ttry:\n\t\tdo FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n\tinterrupt when (distance to adversary) < BYPASS_DIST[0]:\n\t\tfasterLaneSec = self.laneSection.fasterLane\n\t\tdo LaneChangeBehavior(\n\t\t\t\tlaneSectionToSwitch=fasterLaneSec,\n\t\t\t\ttarget_speed=globalParameters.EGO_SPEED)\n\t\ttry:\n\t\t\tdo FollowLaneBehavior(\n\t\t\t\t\ttarget_speed=globalParameters.EGO_SPEED,\n\t\t\t\t\tlaneToFollow=fasterLaneSec.lane) \\\n\t\t\t\tuntil (distance to adversary) > BYPASS_DIST[1]\n\t\tinterrupt when (distance to lead) < SAFE_DIST:\n\t\t\ttry:\n\t\t\t\tdo DecelerateBehavior(globalParameters.EGO_BRAKE)\n\t\t\tinterrupt when (distance to lead) > SAFE_DIST:\n\t\t\t\tdo FollowLaneBehavior(target_speed=LEAD_SPEED) for TERM_TIME seconds\n\t\t\t\tterminate \n\nbehavior AdversaryBehavior():\n\tdo FollowLaneBehavior(target_speed=globalParameters.ADV_INIT_SPEED) \\\n\t\tuntil self.lane is not ego.lane\n\tdo FollowLaneBehavior(target_speed=globalParameters.ADV_END_SPEED)\n\nbehavior LeadBehavior():\n\tfasterLaneSec = self.laneSection.fasterLane\n\tdo LaneChangeBehavior(\n\t\t\tlaneSectionToSwitch=fasterLaneSec,\n\t\t\ttarget_speed=LEAD_SPEED)\n\tdo FollowLaneBehavior(target_speed=LEAD_SPEED)\n\n#################################\n# SPATIAL RELATIONS             #\n#################################\n\ninitLane = Uniform(*network.lanes)\negoSpawnPt = OrientedPoint in initLane.centerline\n\n#################################\n# SCENARIO SPECIFICATION        #\n#################################\n\nego = Car at egoSpawnPt,\n\twith blueprint MODEL,\n\twith behavior EgoBehavior()\n\nadversary = Car following roadDirection for globalParameters.ADV_DIST,\n\twith blueprint MODEL,\n\twith behavior AdversaryBehavior()\n\nlead = Car following roadDirection for LEAD_DIST,\n\twith blueprint MODEL,\n\twith behavior LeadBehavior()\n\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary to intersection) > INIT_DIST\nrequire (distance from lead to intersection) > INIT_DIST\nrequire always (adversary.laneSection._fasterLane is not None)\nterminate when (distance to egoSpawnPt) > TERM_DIST"
}